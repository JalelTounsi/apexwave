{"ast":null,"code":"import { useConnector } from '../providers/network/connectors';\nimport { useConfig } from '../hooks';\nimport { useEffect, useState } from 'react';\n/**\n * Internal hook for reading current chainId for calls.\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useChainId() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b, _c;\n  const {\n    connector\n  } = useConnector();\n  const {\n    readOnlyChainId\n  } = useConfig();\n  const [chainId, setChainId] = useState();\n  useEffect(() => {\n    setChainId(connector === null || connector === void 0 ? void 0 : connector.chainId);\n    if (!connector) {\n      return;\n    }\n    return connector.updated.on(_ref => {\n      let {\n        chainId\n      } = _ref;\n      setChainId(chainId);\n    });\n  }, [connector]);\n  return (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.queryParams) === null || _a === void 0 ? void 0 : _a.chainId) !== null && _b !== void 0 ? _b : chainId) !== null && _c !== void 0 ? _c : readOnlyChainId;\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAM3C;;;;AAIA,OAAM,SAAUC,UAAU,GAA6B;EAAA,IAA5BC,2EAA0B,EAAE;;EACrD,MAAM;IAAEC;EAAS,CAAE,GAAGN,YAAY,EAAE;EAEpC,MAAM;IAAEO;EAAe,CAAE,GAAGN,SAAS,EAAE;EACvC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,EAAsB;EAE5DD,SAAS,CAAC,MAAK;IACbO,UAAU,CAACH,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,OAAO,CAAC;IAE9B,IAAI,CAACF,SAAS,EAAE;MACd;;IAGF,OAAOA,SAAS,CAACI,OAAO,CAACC,EAAE,CAAC,QAAgB;MAAA,IAAf;QAAEH;MAAO,CAAE;MACtCC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACF,SAAS,CAAC,CAAC;EACf,OAAO,sBAAI,aAAJD,IAAI,uBAAJA,IAAI,CAAEO,WAAW,0CAAEJ,OAAO,mCAAIA,OAAO,mCAAID,eAAe;AACjE","names":["useConnector","useConfig","useEffect","useState","useChainId","opts","connector","readOnlyChainId","chainId","setChainId","updated","on","queryParams"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useChainId.ts"],"sourcesContent":["import { QueryParams } from '../constants/type/QueryParams'\nimport { useConnector } from '../providers/network/connectors'\nimport { useConfig } from '../hooks'\nimport { useEffect, useState } from 'react'\n\nexport interface UseChainIdOptions {\n  queryParams?: QueryParams\n}\n\n/**\n * Internal hook for reading current chainId for calls.\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useChainId(opts: UseChainIdOptions = {}) {\n  const { connector } = useConnector()\n\n  const { readOnlyChainId } = useConfig()\n  const [chainId, setChainId] = useState<number | undefined>()\n\n  useEffect(() => {\n    setChainId(connector?.chainId)\n\n    if (!connector) {\n      return\n    }\n\n    return connector.updated.on(({ chainId }) => {\n      setChainId(chainId)\n    })\n  }, [connector])\n  return opts?.queryParams?.chainId ?? chainId ?? readOnlyChainId\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}