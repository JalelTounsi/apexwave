{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { providers } from 'ethers';\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { useConfig, useLocalStorage } from '../../../hooks';\nimport { ConnectorController } from './connectorController';\nimport { InjectedConnector } from './implementations';\nconst Provider = providers.Provider;\nconst Web3Provider = providers.Web3Provider;\nexport const ConnectorContext = createContext({\n  connector: undefined,\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  activate: async () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  deactivate: () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  activateBrowserWallet: () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  reportError: () => {},\n  isLoading: false\n});\nexport function ConnectorContextProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [controller, setController] = useState();\n  const [isLoading, setLoading] = useState(false);\n  const config = useConfig();\n  const {\n    connectors,\n    autoConnect\n  } = config;\n  const [autoConnectTag, setAutoConnectTag] = useLocalStorage('usedapp:autoConnectTag');\n  const activate = useCallback(async function (providerOrConnector) {\n    let {\n      silently,\n      onSuccess\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      silently: false\n    };\n    let controller;\n    if ('activate' in providerOrConnector) {\n      controller = new ConnectorController(providerOrConnector, config);\n    } else {\n      const wrappedProvider = Provider.isProvider(providerOrConnector) ? providerOrConnector : new Web3Provider(providerOrConnector);\n      controller = new ConnectorController(new InjectedConnector(wrappedProvider), config);\n    }\n    setLoading(true);\n    try {\n      if (silently) {\n        await controller.activate(connector => connector.connectEagerly());\n      } else {\n        await controller.activate();\n      }\n      setController(controller);\n      setLoading(false);\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();\n    } catch (error) {\n      controller.reportError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [setController, setLoading]);\n  const activateBrowserWallet = useCallback(async options => {\n    // done for backward compatibility.\n    // If the options object looks like an event object or is undefined,\n    // it's not a valid option and will be ignored\n    if (!options || typeof options.preventDefault === 'function') {\n      options = {\n        type: 'metamask'\n      };\n    }\n    const {\n      type\n    } = options;\n    if (!connectors[type]) {\n      throw new Error(`Connector ${type} is not configured`);\n    }\n    await activate(connectors[type], {\n      onSuccess: () => {\n        setAutoConnectTag(type);\n      }\n    });\n  }, [activate, setAutoConnectTag, connectors]);\n  useEffect(() => {\n    if (autoConnect && autoConnectTag && connectors[autoConnectTag]) {\n      void activate(connectors[autoConnectTag], {\n        silently: true\n      });\n    }\n  }, []);\n  useEffect(() => {\n    controller === null || controller === void 0 ? void 0 : controller.updateConfig(config);\n  }, [controller, config]);\n  return _jsx(ConnectorContext.Provider, Object.assign({\n    value: {\n      connector: controller,\n      deactivate: async () => {\n        setAutoConnectTag(undefined);\n        setLoading(true);\n        await (controller === null || controller === void 0 ? void 0 : controller.deactivate());\n        setController(undefined);\n        setLoading(false);\n      },\n      reportError: err => {\n        controller === null || controller === void 0 ? void 0 : controller.reportError(err);\n      },\n      activate,\n      activateBrowserWallet,\n      isLoading\n    }\n  }, {\n    children: children\n  }));\n}\nexport const useConnector = () => useContext(ConnectorContext);","map":{"version":3,"mappings":"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","names":["providers","createContext","useCallback","useContext","useEffect","useState","useConfig","useLocalStorage","ConnectorController","InjectedConnector","Provider","Web3Provider","ConnectorContext","connector","undefined","activate","deactivate","activateBrowserWallet","reportError","isLoading","ConnectorContextProvider","children","controller","setController","setLoading","config","connectors","autoConnect","autoConnectTag","setAutoConnectTag","providerOrConnector","silently","onSuccess","wrappedProvider","isProvider","connectEagerly","error","options","preventDefault","type","Error","updateConfig","_jsx","value","err","useConnector"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/network/connectors/context.tsx"],"sourcesContent":["import { providers } from 'ethers'\nimport { createContext, ReactNode, useCallback, useContext, useEffect, useState } from 'react'\nimport { useConfig, useLocalStorage } from '../../../hooks'\nimport { Connector } from './connector'\nimport { ConnectorController } from './connectorController'\nimport { InjectedConnector } from './implementations'\n\ntype JsonRpcProvider = providers.JsonRpcProvider\ntype ExternalProvider = providers.ExternalProvider\nconst Provider = providers.Provider\nconst Web3Provider = providers.Web3Provider\n\nexport type ActivateBrowserWallet = (arg?: { type: string }) => void\n\ninterface ConnectorContextValue {\n  connector: ConnectorController | undefined\n  activate: (providerOrConnector: JsonRpcProvider | ExternalProvider | Connector) => Promise<void>\n  deactivate: () => void\n  activateBrowserWallet: ActivateBrowserWallet\n  reportError: (error: Error) => void\n  isLoading: boolean\n}\n\nexport const ConnectorContext = createContext<ConnectorContextValue>({\n  connector: undefined,\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  activate: async () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  deactivate: () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  activateBrowserWallet: () => {},\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\n  reportError: () => {},\n  isLoading: false,\n})\n\nexport interface ConnectorContextProviderProps {\n  children?: ReactNode\n}\n\nexport interface ActivateOptions {\n  silently?: boolean\n  onSuccess?: () => void\n}\n\nexport function ConnectorContextProvider({ children }: ConnectorContextProviderProps) {\n  const [controller, setController] = useState<ConnectorController>()\n  const [isLoading, setLoading] = useState(false)\n  const config = useConfig()\n  const { connectors, autoConnect } = config\n  const [autoConnectTag, setAutoConnectTag] = useLocalStorage('usedapp:autoConnectTag')\n\n  const activate = useCallback(\n    async (\n      providerOrConnector: JsonRpcProvider | ExternalProvider | Connector,\n      { silently, onSuccess }: ActivateOptions = { silently: false }\n    ) => {\n      let controller: ConnectorController\n      if ('activate' in providerOrConnector) {\n        controller = new ConnectorController(providerOrConnector, config as any)\n      } else {\n        const wrappedProvider = Provider.isProvider(providerOrConnector)\n          ? providerOrConnector\n          : new Web3Provider(providerOrConnector)\n        controller = new ConnectorController(new InjectedConnector(wrappedProvider), config as any)\n      }\n      setLoading(true)\n      try {\n        if (silently) {\n          await controller.activate((connector) => connector.connectEagerly())\n        } else {\n          await controller.activate()\n        }\n\n        setController(controller)\n        setLoading(false)\n        onSuccess?.()\n      } catch (error) {\n        controller.reportError(error as any)\n      } finally {\n        setLoading(false)\n      }\n    },\n    [setController, setLoading]\n  )\n\n  const activateBrowserWallet: ActivateBrowserWallet = useCallback(\n    async (options) => {\n      // done for backward compatibility.\n      // If the options object looks like an event object or is undefined,\n      // it's not a valid option and will be ignored\n      if (!options || typeof (options as any).preventDefault === 'function') {\n        options = { type: 'metamask' }\n      }\n      const { type } = options\n      if (!connectors[type]) {\n        throw new Error(`Connector ${type} is not configured`)\n      }\n      await activate(connectors[type], {\n        onSuccess: () => {\n          setAutoConnectTag(type)\n        },\n      })\n    },\n    [activate, setAutoConnectTag, connectors]\n  )\n\n  useEffect(() => {\n    if (autoConnect && autoConnectTag && connectors[autoConnectTag]) {\n      void activate(connectors[autoConnectTag], {\n        silently: true,\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    controller?.updateConfig(config)\n  }, [controller, config])\n\n  return (\n    <ConnectorContext.Provider\n      value={{\n        connector: controller,\n        deactivate: async () => {\n          setAutoConnectTag(undefined)\n          setLoading(true)\n          await controller?.deactivate()\n          setController(undefined)\n          setLoading(false)\n        },\n        reportError: (err) => {\n          controller?.reportError(err)\n        },\n        activate,\n        activateBrowserWallet,\n        isLoading,\n      }}\n    >\n      {children}\n    </ConnectorContext.Provider>\n  )\n}\n\nexport const useConnector = () => useContext(ConnectorContext)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}