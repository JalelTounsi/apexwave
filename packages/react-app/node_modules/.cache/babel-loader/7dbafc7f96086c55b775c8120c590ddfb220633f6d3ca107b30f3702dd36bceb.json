{"ast":null,"code":"import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n  const privateKey = options && 'privateKey' in options && options.privateKey;\n  const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n  const json = options && 'json' in options && options.json;\n  const password = options && 'password' in options && options.password;\n  const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n  const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n  const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n  const optionsSigner = options && 'signer' in options && options.signer;\n  return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library && 'getSigner' in library ? library.getSigner() : undefined);\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAmB,QAAQ;AAO1C,OAAO,MAAMC,oBAAoB,GAAG,CAClCC,QAAsB,EACtBC,OAA4B,EAC5BC,OAA4C,KAC1C;EACF,MAAMC,UAAU,GAAGF,OAAO,IAAI,YAAY,IAAIA,OAAO,IAAIA,OAAO,CAACE,UAAU;EAC3E,MAAMC,cAAc,GAAGH,OAAO,IAAI,gBAAgB,IAAIA,OAAO,IAAIA,OAAO,CAACG,cAAc;EACvF,MAAMC,IAAI,GAAGJ,OAAO,IAAI,MAAM,IAAIA,OAAO,IAAIA,OAAO,CAACI,IAAI;EACzD,MAAMC,QAAQ,GAAGL,OAAO,IAAI,UAAU,IAAIA,OAAO,IAAIA,OAAO,CAACK,QAAQ;EAErE,MAAMC,gBAAgB,GAAGJ,UAAU,IAAIH,QAAQ,IAAI,IAAIF,MAAM,CAACU,MAAM,CAACL,UAAU,EAAEH,QAAQ,CAAC;EAC1F,MAAMS,oBAAoB,GACxBL,cAAc,IAAIJ,QAAQ,IAAIF,MAAM,CAACU,MAAM,CAACE,YAAY,CAACN,cAAc,CAAC,CAACO,OAAO,CAACX,QAAQ,CAAC;EAC5F,MAAMY,mBAAmB,GACvBP,IAAI,IAAIC,QAAQ,IAAIN,QAAQ,IAAIF,MAAM,CAACU,MAAM,CAACK,qBAAqB,CAACR,IAAI,EAAEC,QAAQ,CAAC,CAACK,OAAO,CAACX,QAAQ,CAAC;EAEvG,MAAMc,aAAa,GAAGb,OAAO,IAAI,QAAQ,IAAIA,OAAO,IAAIA,OAAO,CAACc,MAAM;EAEtE,OACER,gBAAgB,IAChBE,oBAAoB,IACpBG,mBAAmB,IACnBE,aAAa,KACZZ,OAAO,IAAI,WAAW,IAAIA,OAAO,GAAGA,OAAO,CAACc,SAAS,EAAE,GAAGC,SAAS,CAAC;AAEzE,CAAC","names":["ethers","getSignerFromOptions","provider","options","library","privateKey","mnemonicPhrase","json","password","privateKeySigner","Wallet","mnemonicPhraseSigner","fromMnemonic","connect","encryptedJsonSigner","fromEncryptedJsonSync","optionsSigner","signer","getSigner","undefined"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/helpers/getSignerFromOptions.ts"],"sourcesContent":["import { ethers, providers } from 'ethers'\nimport { TransactionOptions } from '../model'\n\ntype BaseProvider = providers.BaseProvider\ntype JsonRpcProvider = providers.JsonRpcProvider\ntype FallbackProvider = providers.FallbackProvider\n\nexport const getSignerFromOptions = (\n  provider: BaseProvider,\n  options?: TransactionOptions,\n  library?: JsonRpcProvider | FallbackProvider\n) => {\n  const privateKey = options && 'privateKey' in options && options.privateKey\n  const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase\n  const json = options && 'json' in options && options.json\n  const password = options && 'password' in options && options.password\n\n  const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider)\n  const mnemonicPhraseSigner =\n    mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider)\n  const encryptedJsonSigner =\n    json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider)\n\n  const optionsSigner = options && 'signer' in options && options.signer\n\n  return (\n    privateKeySigner ||\n    mnemonicPhraseSigner ||\n    encryptedJsonSigner ||\n    optionsSigner ||\n    (library && 'getSigner' in library ? library.getSigner() : undefined)\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}