{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address) {\n  const {\n    library\n  } = useEthers();\n  const [ens, setENS] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !address) return;\n      try {\n        setIsLoading(true);\n        const resolved = await library.lookupAddress(address);\n        if (!mounted) return;\n        setENS(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens,\n    isLoading,\n    error\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,aAAa;AAEvC;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,gBAAgB,CAACC,OAA2B;EAC1D,MAAM;IAAEC;EAAO,CAAE,GAAGH,SAAS,EAAE;EAC/B,MAAM,CAACI,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,EAAiB;EAC/C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAe,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAK;IACb,IAAIY,OAAO,GAAG,IAAI;IAElB,KAAK,CAAC,YAAW;MACf,IAAI,CAACP,OAAO,IAAI,CAACD,OAAO,EAAE;MAC1B,IAAI;QACFK,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMI,QAAQ,GAAG,MAAMR,OAAO,CAACS,aAAa,CAACV,OAAO,CAAC;QACrD,IAAI,CAACQ,OAAO,EAAE;QACdL,MAAM,CAACM,QAAQ,CAAC;OACjB,CAAC,OAAOE,CAAM,EAAE;QACf,IAAI,CAACH,OAAO,EAAE;QACdD,QAAQ,CAACI,CAAC,CAAC;OACZ,SAAS;QACRN,YAAY,CAAC,KAAK,CAAC;;IAEvB,CAAC,GAAG;IAEJ,OAAO,MAAK;MACVG,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACR,OAAO,EAAEC,OAAO,CAAC,CAAC;EAEtB,OAAO;IAAEC,GAAG;IAAEE,SAAS;IAAEE;EAAK,CAAE;AAClC","names":["useEffect","useState","useEthers","useLookupAddress","address","library","ens","setENS","isLoading","setIsLoading","error","setError","mounted","resolved","lookupAddress","e"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useLookupAddress.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers } from './useEthers'\n\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup \n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address: string | undefined) {\n  const { library } = useEthers()\n  const [ens, setENS] = useState<string | null>()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    void (async () => {\n      if (!library || !address) return\n      try {\n        setIsLoading(true)\n        const resolved = await library.lookupAddress(address)\n        if (!mounted) return\n        setENS(resolved)\n      } catch (e: any) {\n        if (!mounted) return\n        setError(e)\n      } finally {\n        setIsLoading(false)\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [address, library])\n\n  return { ens, isLoading, error }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}