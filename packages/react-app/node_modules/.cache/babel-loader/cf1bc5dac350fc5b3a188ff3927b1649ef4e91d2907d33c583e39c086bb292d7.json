{"ast":null,"code":"export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n  const number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\nfunction formatNumber(options, value) {\n  const integer = getIntegerPart(value, options.decimals);\n  const thousands = splitThousands(integer, options.thousandSeparator);\n  const decimal = getDecimalPart(value, options.decimals);\n  const digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    const fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\nfunction stripFrontZeroes(value) {\n  const stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\nfunction splitThousands(value, separator) {\n  const count = value.length / 3;\n  const resultValue = value.split('');\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n  return resultValue.join('');\n}\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return `${integer}${separator}${decimals}`;\n  }\n}\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  const length = significantDigits - integerLength;\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","decimals","thousandSeparator","decimalSeparator","significantDigits","Infinity","useFixedPrecision","fixedPrecisionDigits","prefix","suffix","INPUT_REGEX","formatCurrency","options","value","test","TypeError","number","formatNumber","join","integer","getIntegerPart","thousands","splitThousands","decimal","getDecimalPart","digits","toFixed","toSignificant","length","joinDecimals","fragment","substring","stripFrontZeroes","stripped","replace","separator","count","resultValue","split","i","splice","padStart","integerLength","stripEndZeroes","padEnd"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/model/formatting.ts"],"sourcesContent":["export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: '',\n}\n\nexport type CurrencyFormatOptions = typeof DEFAULT_OPTIONS\n\nconst INPUT_REGEX = /^\\d*$/\n\nexport function formatCurrency(options: CurrencyFormatOptions, value: string): string {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.')\n  }\n  const number = formatNumber(options, value)\n  return [options.prefix, number, options.suffix].join('')\n}\n\nfunction formatNumber(options: CurrencyFormatOptions, value: string) {\n  const integer = getIntegerPart(value, options.decimals)\n  const thousands = splitThousands(integer, options.thousandSeparator)\n  const decimal = getDecimalPart(value, options.decimals)\n  const digits = options.useFixedPrecision\n    ? toFixed(decimal, options.fixedPrecisionDigits)\n    : toSignificant(decimal, integer.length, options.significantDigits)\n  return joinDecimals(thousands, digits, options.decimalSeparator)\n}\n\nfunction getIntegerPart(value: string, decimals: number) {\n  if (value.length <= decimals) {\n    return '0'\n  } else {\n    const fragment = value.substring(0, value.length - decimals)\n    return stripFrontZeroes(fragment)\n  }\n}\n\nfunction stripFrontZeroes(value: string) {\n  const stripped = value.replace(/^0+/, '')\n  return stripped || '0'\n}\n\nfunction splitThousands(value: string, separator: string) {\n  const count = value.length / 3\n  const resultValue = value.split('')\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator)\n  }\n  return resultValue.join('')\n}\n\nfunction getDecimalPart(value: string, decimals: number) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0')\n  } else {\n    return value.substring(value.length - decimals)\n  }\n}\n\nfunction joinDecimals(integer: string, decimals: string, separator: string) {\n  if (!decimals) {\n    return integer\n  } else {\n    return `${integer}${separator}${decimals}`\n  }\n}\n\nfunction toSignificant(decimal: string, integerLength: number, significantDigits: number) {\n  const length = significantDigits - integerLength\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal)\n  } else {\n    return stripEndZeroes(decimal.substring(0, length))\n  }\n}\n\nfunction stripEndZeroes(value: string) {\n  return value.replace(/0+$/, '')\n}\n\nfunction toFixed(decimal: string, fixedPrecisionDigits: number) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0')\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}