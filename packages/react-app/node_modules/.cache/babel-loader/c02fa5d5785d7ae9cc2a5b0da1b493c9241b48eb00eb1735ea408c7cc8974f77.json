{"ast":null,"code":"import { utils, constants } from 'ethers';\nimport { getChainById } from './chain';\nexport const GNOSIS_SAFE_ABI = ['function nonce() view returns (uint256)', 'event ExecutionSuccess(bytes32 txHash, uint256 payment)'];\nexport const buildSafeTransaction = template => {\n  return {\n    to: template.to,\n    value: template.value || 0,\n    data: template.data || '0x',\n    operation: template.operation || 0,\n    safeTxGas: template.safeTxGas || 0,\n    baseGas: template.baseGas || 0,\n    gasPrice: template.gasPrice || 0,\n    gasToken: template.gasToken || constants.AddressZero,\n    refundReceiver: template.refundReceiver || constants.AddressZero,\n    nonce: template.nonce || 0\n  };\n};\nconst EIP712_SAFE_TX_TYPE = {\n  SafeTx: [{\n    type: 'address',\n    name: 'to'\n  }, {\n    type: 'uint256',\n    name: 'value'\n  }, {\n    type: 'bytes',\n    name: 'data'\n  }, {\n    type: 'uint8',\n    name: 'operation'\n  }, {\n    type: 'uint256',\n    name: 'safeTxGas'\n  }, {\n    type: 'uint256',\n    name: 'baseGas'\n  }, {\n    type: 'uint256',\n    name: 'gasPrice'\n  }, {\n    type: 'address',\n    name: 'gasToken'\n  }, {\n    type: 'address',\n    name: 'refundReceiver'\n  }, {\n    type: 'uint256',\n    name: 'nonce'\n  }]\n};\nexport const calculateSafeTransactionHash = (safe, safeTx, chainId) => {\n  return utils._TypedDataEncoder.hash({\n    verifyingContract: safe.address,\n    chainId\n  }, EIP712_SAFE_TX_TYPE, safeTx);\n};\nexport const getLatestNonce = async (chainId, safeAddress) => {\n  var _a, _b, _c;\n  try {\n    const response = await fetch(`https://safe-transaction.${(_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName}.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`);\n    if (!response.ok) return null;\n    const allTransactions = await response.json();\n    const latestNonce = (_c = (_b = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.results) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.nonce;\n    if (!latestNonce) return null;\n    return latestNonce;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\nexport const waitForSafeTransaction = async (transactionPromise, contract, chainId, safeTx) => {\n  const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId);\n  return new Promise((resolve, reject) => {\n    void transactionPromise.catch(err => {\n      if ((err === null || err === void 0 ? void 0 : err.message) === 'Transaction was rejected') {\n        reject(err);\n      }\n    });\n    const onExecutionSuccess = async (txHash, _payment, event) => {\n      if (txHash === safeTxHash) {\n        contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n        const transaction = await event.getTransaction();\n        const receipt = await event.getTransactionReceipt();\n        resolve({\n          transaction,\n          receipt,\n          rejected: false\n        });\n      } else {\n        const currentNonce = await contract.nonce();\n        if (Number(currentNonce) > Number(safeTx.nonce)) {\n          contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n          const transaction = await event.getTransaction();\n          const receipt = await event.getTransactionReceipt();\n          resolve({\n            transaction,\n            receipt,\n            rejected: true\n          });\n        }\n      }\n    };\n    contract.on('ExecutionSuccess', onExecutionSuccess);\n  });\n};","map":{"version":3,"mappings":"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","names":["utils","constants","getChainById","GNOSIS_SAFE_ABI","buildSafeTransaction","template","to","value","data","operation","safeTxGas","baseGas","gasPrice","gasToken","AddressZero","refundReceiver","nonce","EIP712_SAFE_TX_TYPE","SafeTx","type","name","calculateSafeTransactionHash","safe","safeTx","chainId","_TypedDataEncoder","hash","verifyingContract","address","getLatestNonce","safeAddress","response","fetch","chainName","ok","allTransactions","json","latestNonce","results","err","console","error","undefined","waitForSafeTransaction","transactionPromise","contract","safeTxHash","Promise","resolve","reject","catch","message","onExecutionSuccess","txHash","_payment","event","removeListener","transaction","getTransaction","receipt","getTransactionReceipt","rejected","currentNonce","Number","on"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/helpers/gnosisSafeUtils.ts"],"sourcesContent":["import { TransactionResponse, TransactionReceipt } from '@ethersproject/abstract-provider'\nimport { BigNumber, BigNumberish, Contract, Event } from 'ethers'\nimport { utils, constants } from 'ethers'\nimport { getChainById } from './chain'\n\nexport const GNOSIS_SAFE_ABI = [\n  'function nonce() view returns (uint256)',\n  'event ExecutionSuccess(bytes32 txHash, uint256 payment)',\n]\n\ninterface MetaTransaction {\n  to: string\n  value: string | number | BigNumber\n  data: string\n  operation: number\n}\n\nexport interface SafeTransaction extends MetaTransaction {\n  safeTxGas: string | number\n  baseGas: string | number\n  gasPrice: string | number\n  gasToken: string\n  refundReceiver: string\n  nonce: string | number\n}\n\nexport const buildSafeTransaction = (template: {\n  to: string\n  value?: BigNumber | number | string\n  data?: string\n  operation?: number\n  safeTxGas?: number | string\n  baseGas?: number | string\n  gasPrice?: number | string\n  gasToken?: string\n  refundReceiver?: string\n  nonce?: number\n}): SafeTransaction => {\n  return {\n    to: template.to,\n    value: template.value || 0,\n    data: template.data || '0x',\n    operation: template.operation || 0,\n    safeTxGas: template.safeTxGas || 0,\n    baseGas: template.baseGas || 0,\n    gasPrice: template.gasPrice || 0,\n    gasToken: template.gasToken || constants.AddressZero,\n    refundReceiver: template.refundReceiver || constants.AddressZero,\n    nonce: template.nonce || 0,\n  }\n}\n\nconst EIP712_SAFE_TX_TYPE = {\n  SafeTx: [\n    { type: 'address', name: 'to' },\n    { type: 'uint256', name: 'value' },\n    { type: 'bytes', name: 'data' },\n    { type: 'uint8', name: 'operation' },\n    { type: 'uint256', name: 'safeTxGas' },\n    { type: 'uint256', name: 'baseGas' },\n    { type: 'uint256', name: 'gasPrice' },\n    { type: 'address', name: 'gasToken' },\n    { type: 'address', name: 'refundReceiver' },\n    { type: 'uint256', name: 'nonce' },\n  ],\n}\n\nexport const calculateSafeTransactionHash = (\n  safe: Contract,\n  safeTx: SafeTransaction,\n  chainId: BigNumberish\n): string => {\n  return utils._TypedDataEncoder.hash({ verifyingContract: safe.address, chainId }, EIP712_SAFE_TX_TYPE, safeTx)\n}\n\nexport const getLatestNonce = async (chainId: number, safeAddress: string): Promise<number | null | undefined> => {\n  try {\n    const response = await fetch(\n      `https://safe-transaction.${\n        getChainById(chainId)?.chainName\n      }.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`\n    )\n    if (!response.ok) return null\n    const allTransactions = await response.json()\n    const latestNonce = allTransactions?.results?.[0]?.nonce\n    if (!latestNonce) return null\n    return latestNonce\n  } catch (err: any) {\n    console.error(err)\n    return undefined\n  }\n}\n\nexport const waitForSafeTransaction = async (\n  transactionPromise: Promise<TransactionResponse>,\n  contract: Contract,\n  chainId: number,\n  safeTx: SafeTransaction\n): Promise<{\n  transaction: TransactionResponse\n  receipt: TransactionReceipt\n  rejected: boolean\n}> => {\n  const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId)\n\n  return new Promise((resolve, reject) => {\n    void transactionPromise.catch((err: any) => {\n      if (err?.message === 'Transaction was rejected') {\n        reject(err)\n      }\n    })\n\n    const onExecutionSuccess = async (txHash: string, _payment: BigNumber, event: Event) => {\n      if (txHash === safeTxHash) {\n        contract.removeListener('ExecutionSuccess', onExecutionSuccess)\n\n        const transaction = await event.getTransaction()\n        const receipt = await event.getTransactionReceipt()\n\n        resolve({ transaction, receipt, rejected: false })\n      } else {\n        const currentNonce = await contract.nonce()\n\n        if (Number(currentNonce) > Number(safeTx.nonce)) {\n          contract.removeListener('ExecutionSuccess', onExecutionSuccess)\n          const transaction = await event.getTransaction()\n          const receipt = await event.getTransactionReceipt()\n\n          resolve({\n            transaction,\n            receipt,\n            rejected: true,\n          })\n        }\n      }\n    }\n    contract.on('ExecutionSuccess', onExecutionSuccess)\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}