{"ast":null,"code":"// NOTE: We explicitly export the symbols in the root index.ts file to have better control over package's public API.\nexport { ChainId, BNB, BUSD, DEFAULT_SUPPORTED_CHAINS, Dai, ERC20, ERC20Interface, ERC20Mock, ERC20MockInterface, Ether, KovanDai, KovanEther, MultiCall, MultiCall2, MultiCall2ABI, MultiCallABI, NATIVE_CURRENCY, TestBNB, TestBUSD } from './constants';\nexport { DAppProvider, getStoredTransactionState, multicall, multicall2, useConnector } from './providers';\nexport { useBlockMeta, useLogs, useRawLogs, useBlockNumber, useBlockNumbers, useCall, useCalls, useConfig, useUpdateConfig, useContractCall, useContractCalls, useChainCall, useChainCalls, useChainMeta, useChainState, useContractFunction, useEtherBalance, useEthers, useGasPrice, useLookupAddress, useMulticallAddress, useNotifications, useSendTransaction, useToken, useTokenAllowance, useTokenBalance, useTokenList, useTransactions, useRawCall, useRawCalls, useResolveName } from './hooks';\nexport { Currency, CurrencyValue, FiatCurrency, NativeCurrency, Token, transactionErrored } from './model';\nexport * from './model/chain';\nexport { isLocalChain, isTestChain, addressEqual, compareAddress, shortenAddress, shortenIfAddress, shortenIfTransactionHash, shortenTransactionHash, getChainName, getExplorerAddressLink, getExplorerTransactionLink, Event as ConnectorEvent } from './helpers';\nexport { MetamaskConnector } from './providers/network/connectors/implementations/metamask';\nexport { InjectedConnector } from './providers/network/connectors/implementations/injected';\nexport { CoinbaseWalletConnector } from './providers/network/connectors/implementations/coinbase';","map":{"version":3,"mappings":"AAAA;AAGA,SACEA,OAAO,EACPC,GAAG,EACHC,IAAI,EACJC,wBAAwB,EACxBC,GAAG,EACHC,KAAK,EACLC,cAAc,EACdC,SAAS,EACTC,kBAAkB,EAClBC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACTC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,eAAe,EACfC,OAAO,EACPC,QAAQ,QACH,aAAa;AAcpB,SAASC,YAAY,EAAEC,yBAAyB,EAAEC,SAAS,EAAEC,UAAU,EAAEC,YAAY,QAAQ,aAAa;AAG1G,SACEC,YAAY,EACZC,OAAO,EACPC,UAAU,EACVC,cAAc,EACdC,eAAe,EACfC,OAAO,EACPC,QAAQ,EACRC,SAAS,EACTC,eAAe,EACfC,eAAe,EACfC,gBAAgB,EAChBC,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,aAAa,EACbC,mBAAmB,EACnBC,eAAe,EACfC,SAAS,EACTC,WAAW,EACXC,gBAAgB,EAChBC,mBAAmB,EACnBC,gBAAgB,EAChBC,kBAAkB,EAClBC,QAAQ,EACRC,iBAAiB,EACjBC,eAAe,EACfC,YAAY,EACZC,eAAe,EACfC,UAAU,EACVC,WAAW,EACXC,cAAc,QACT,SAAS;AAShB,SAASC,QAAQ,EAAEC,aAAa,EAAEC,YAAY,EAAEC,cAAc,EAAEC,KAAK,EAAEC,kBAAkB,QAAQ,SAAS;AAE1G,cAAc,eAAe;AAC7B,SACEC,YAAY,EACZC,WAAW,EACXC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,gBAAgB,EAChBC,wBAAwB,EACxBC,sBAAsB,EACtBC,YAAY,EACZC,sBAAsB,EACtBC,0BAA0B,EAC1BC,KAAK,IAAIC,cAAc,QAClB,WAAW;AAClB,SAASC,iBAAiB,QAAQ,yDAAyD;AAC3F,SAASC,iBAAiB,QAAQ,yDAAyD;AAC3F,SAASC,uBAAuB,QAAQ,yDAAyD","names":["ChainId","BNB","BUSD","DEFAULT_SUPPORTED_CHAINS","Dai","ERC20","ERC20Interface","ERC20Mock","ERC20MockInterface","Ether","KovanDai","KovanEther","MultiCall","MultiCall2","MultiCall2ABI","MultiCallABI","NATIVE_CURRENCY","TestBNB","TestBUSD","DAppProvider","getStoredTransactionState","multicall","multicall2","useConnector","useBlockMeta","useLogs","useRawLogs","useBlockNumber","useBlockNumbers","useCall","useCalls","useConfig","useUpdateConfig","useContractCall","useContractCalls","useChainCall","useChainCalls","useChainMeta","useChainState","useContractFunction","useEtherBalance","useEthers","useGasPrice","useLookupAddress","useMulticallAddress","useNotifications","useSendTransaction","useToken","useTokenAllowance","useTokenBalance","useTokenList","useTransactions","useRawCall","useRawCalls","useResolveName","Currency","CurrencyValue","FiatCurrency","NativeCurrency","Token","transactionErrored","isLocalChain","isTestChain","addressEqual","compareAddress","shortenAddress","shortenIfAddress","shortenIfTransactionHash","shortenTransactionHash","getChainName","getExplorerAddressLink","getExplorerTransactionLink","Event","ConnectorEvent","MetamaskConnector","InjectedConnector","CoinbaseWalletConnector"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/index.ts"],"sourcesContent":["// NOTE: We explicitly export the symbols in the root index.ts file to have better control over package's public API.\n\nexport type { Chain, Config, FullConfig, MulticallAddresses, NodeUrls, QueryParams, LogQueryParams } from './constants'\nexport {\n  ChainId,\n  BNB,\n  BUSD,\n  DEFAULT_SUPPORTED_CHAINS,\n  Dai,\n  ERC20,\n  ERC20Interface,\n  ERC20Mock,\n  ERC20MockInterface,\n  Ether,\n  KovanDai,\n  KovanEther,\n  MultiCall,\n  MultiCall2,\n  MultiCall2ABI,\n  MultiCallABI,\n  NATIVE_CURRENCY,\n  TestBNB,\n  TestBUSD,\n} from './constants'\nexport type {\n  DAppProviderProps,\n  AddNotificationPayload,\n  RemoveNotificationPayload,\n  ChainState,\n  Notification,\n  Notifications,\n  RawCall,\n  RawCallResult,\n  State,\n  StoredTransaction,\n  StoredTransactions,\n} from './providers'\nexport { DAppProvider, getStoredTransactionState, multicall, multicall2, useConnector } from './providers'\nexport type { Connector, ConnectorController, ConnectorUpdateData } from './providers'\nexport type { TypedFilter, Call, ContractCall, Web3Ethers, TokenList } from './hooks'\nexport {\n  useBlockMeta,\n  useLogs,\n  useRawLogs,\n  useBlockNumber,\n  useBlockNumbers,\n  useCall,\n  useCalls,\n  useConfig,\n  useUpdateConfig,\n  useContractCall,\n  useContractCalls,\n  useChainCall,\n  useChainCalls,\n  useChainMeta,\n  useChainState,\n  useContractFunction,\n  useEtherBalance,\n  useEthers,\n  useGasPrice,\n  useLookupAddress,\n  useMulticallAddress,\n  useNotifications,\n  useSendTransaction,\n  useToken,\n  useTokenAllowance,\n  useTokenBalance,\n  useTokenList,\n  useTransactions,\n  useRawCall,\n  useRawCalls,\n  useResolveName,\n} from './hooks'\nexport type {\n  CurrencyFormatOptions,\n  TransactionOptions,\n  TransactionState,\n  TransactionStatus,\n  Falsy,\n  Params,\n} from './model'\nexport { Currency, CurrencyValue, FiatCurrency, NativeCurrency, Token, transactionErrored } from './model'\nexport type { LogsResult, CallResult } from './helpers'\nexport * from './model/chain'\nexport {\n  isLocalChain,\n  isTestChain,\n  addressEqual,\n  compareAddress,\n  shortenAddress,\n  shortenIfAddress,\n  shortenIfTransactionHash,\n  shortenTransactionHash,\n  getChainName,\n  getExplorerAddressLink,\n  getExplorerTransactionLink,\n  Event as ConnectorEvent,\n} from './helpers'\nexport { MetamaskConnector } from './providers/network/connectors/implementations/metamask'\nexport { InjectedConnector } from './providers/network/connectors/implementations/injected'\nexport { CoinbaseWalletConnector } from './providers/network/connectors/implementations/coinbase'\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}