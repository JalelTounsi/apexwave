{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n  const _blockNumber = useBlockNumber();\n  const blockNumbers = useBlockNumbers();\n  const [logs, setLogs] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber, chainId]);\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n  }\n  useEffect(() => {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,eAAe,EAAEC,cAAc,QAAQ,UAAU;AAK1D;;;;;;;;;AASA,OAAM,SAAUC,UAAU,CACxBC,MAAgF,EACnD;EAAA,IAA7BC,kFAA2B,EAAE;EAE7B,MAAM;IAAEC;EAAO,CAAE,GAAGP,SAAS,EAAE;EAC/B,MAAMQ,SAAS,GAAGP,mBAAmB,EAAE;EACvC,MAAMQ,YAAY,GAAGN,cAAc,EAAE;EACrC,MAAMO,YAAY,GAAGR,eAAe,EAAE;EAEtC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,EAAqB;EAErD,MAAM;IAAEc;EAAO,CAAE,GAAGP,WAAW;EAE/B,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,OAAO,CACrC,MAAOe,OAAO,GAAG,CAACL,SAAS,CAACK,OAAO,CAAC,EAAEH,YAAY,CAACG,OAAO,CAAC,CAAC,GAAG,CAACN,OAAO,EAAEE,YAAY,CAAE,EACvF,CAACD,SAAS,EAAED,OAAO,EAAEG,YAAY,EAAED,YAAY,EAAEI,OAAO,CAAC,CAC1D;EAED,eAAeG,UAAU;IACvBJ,OAAO,CAAC,CAACP,MAAM,GAAGY,SAAS,GAAG,OAAMH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,OAAO,CAACb,MAAM,CAAC,EAAC;EAChE;EAEAR,SAAS,CAAC,MAAK;IACb,KAAKmB,UAAU,EAAE;EACnB,CAAC,EAAE,CAACF,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAE3B,OAAOJ,IAAI;AACb","names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumbers","useBlockNumber","useRawLogs","filter","queryParams","library","providers","_blockNumber","blockNumbers","logs","setLogs","chainId","provider","blockNumber","updateLogs","undefined","getLogs"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useRawLogs.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumbers, useBlockNumber } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport type { Filter, FilterByBlockHash, Log } from '@ethersproject/abstract-provider'\nimport { Falsy } from '../model/types'\n\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash> | Falsy,\n  queryParams: QueryParams = {}\n): Log[] | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [logs, setLogs] = useState<Log[] | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber, chainId]\n  )\n\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await provider?.getLogs(filter))\n  }\n\n  useEffect(() => {\n    void updateLogs()\n  }, [provider, blockNumber])\n\n  return logs\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}