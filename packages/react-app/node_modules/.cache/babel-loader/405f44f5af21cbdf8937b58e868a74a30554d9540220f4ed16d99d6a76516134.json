{"ast":null,"code":"import { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair(first, second, delay) {\n  const [debouncedValue, setDebouncedValue] = useState([first, second]);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue([first, second]);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [first, second, delay]);\n  return debouncedValue;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C;;;;;;;;;;;AAWA,OAAM,SAAUC,eAAe,CAAOC,KAAQ,EAAEC,MAAS,EAAEC,KAAa;EACtE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAS,CAACE,KAAK,EAAEC,MAAM,CAAC,CAAC;EAE7EJ,SAAS,CAAC,MAAK;IACb;IACA,MAAMQ,OAAO,GAAGC,UAAU,CAAC,MAAK;MAC9BF,iBAAiB,CAAC,CAACJ,KAAK,EAAEC,MAAM,CAAC,CAAC;IACpC,CAAC,EAAEC,KAAK,CAAC;IAET;IACA;IACA;IACA,OAAO,MAAK;MACVK,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACL,KAAK,EAAEC,MAAM,EAAEC,KAAK,CAAC,CAAC;EAE1B,OAAOC,cAAc;AACvB","names":["useEffect","useState","useDebouncePair","first","second","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useDebouncePair.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair<T, U>(first: T, second: U, delay: number): [T, U] {\n  const [debouncedValue, setDebouncedValue] = useState<[T, U]>([first, second])\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue([first, second])\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [first, second, delay])\n\n  return debouncedValue\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}