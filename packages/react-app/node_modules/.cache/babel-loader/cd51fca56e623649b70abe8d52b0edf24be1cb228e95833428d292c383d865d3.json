{"ast":null,"code":"/**\n * @public\n */\nexport function transactionErrored(transaction) {\n  return 'errorMessage' in transaction;\n}","map":{"version":3,"mappings":"AAkEA;;;AAGA,OAAM,SAAUA,kBAAkB,CAACC,WAA8B;EAC/D,OAAO,cAAc,IAAIA,WAAW;AACtC","names":["transactionErrored","transaction"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/model/TransactionStatus.ts"],"sourcesContent":["import type { TransactionResponse, TransactionReceipt } from '@ethersproject/abstract-provider'\n\n/**\n * Represents current state of a transaction.\n *\n * Can be one of the following:\n * - `None` - before a transaction is created.\n * - `Pending signature` - when a transaction has been initiated, but requires signature.\n * - `Mining` - when a transaction is sent to the network, but not yet mined. In this state `transaction: TransactionResponse` is available.\n * - `Success` - when a transaction has been mined successfully. In this state `transaction: TransactionResponse` and `receipt: TransactionReceipt` are available.\n * - `Fail` - when a transaction has been mined, but ended up reverted. Again `transaction: TransactionResponse` and `receipt: TransactionReceipt` are available.\n * - `Exception` - when a transaction hasn't started, due to the exception that was thrown before the transaction was propagated to the network. The exception can come from application/library code (e.g. unexpected exception like malformed arguments) or externally (e.g user discarded transaction in Metamask). In this state the `errorMessage: string` is available (as well as exception object).\n * - `CollectingSignaturePool` - when user is sending transaction by Multisig wallet (Gnosis Safe) and is waiting for other owners to sign the transaction.\n * @public\n */\nexport type TransactionState =\n  | 'None'\n  | 'PendingSignature'\n  | 'Mining'\n  | 'Success'\n  | 'Fail'\n  | 'Exception'\n  | 'CollectingSignaturePool'\n\n/**\n * Represents a state of a single transaction.\n *\n * Change in `state` will update the component so you can use it in useEffect.\n *\n * @public\n */\nexport interface TransactionStatus {\n  /**\n   * Current state of the transaction. See [TransactionState](https://usedapp-docs.netlify.app/docs/API%20Reference/Models#transactionstate).\n   */\n  status: TransactionState\n  /**\n   * optional field. See [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse).\n   */\n  transaction?: TransactionResponse\n  /**\n   * optional field. See [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt).\n   */\n  receipt?: TransactionReceipt\n  /**\n   * optional field. See [ChainId](#chainid). Available when `status` is not `None`.\n   */\n  chainId?: number\n  /**\n   * optional field that contains error message when transaction fails or throws.\n   */\n  errorMessage?: string\n  /**\n   * string that can contain one of `None` `PendingSignature` `Mining` `Success` `Fail` `Exception` `CollectingSignaturePool`\n   */\n  errorCode?: number\n  /**\n   * string that can contain one of `None` `PendingSignature` `Mining` `Success` `Fail` `Exception` `CollectingSignaturePool`\n   */\n  errorHash?: string\n  /**\n   * string that can contain one of `None` `PendingSignature` `Mining` `Success` `Fail` `Exception` `CollectingSignaturePool`\n   */\n  originalTransaction?: TransactionResponse\n}\n\n/**\n * @public\n */\nexport function transactionErrored(transaction: TransactionStatus) {\n  return 'errorMessage' in transaction\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}