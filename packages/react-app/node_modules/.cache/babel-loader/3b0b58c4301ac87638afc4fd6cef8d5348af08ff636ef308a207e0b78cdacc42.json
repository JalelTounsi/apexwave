{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  var _a, _b, _c;\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state;\n      // merge with existing state\n      const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = Object.assign(Object.assign({}, newState), {\n          [address]: Object.assign(Object.assign({}, entries), newState[address])\n        });\n      }\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n  return state;\n}","map":{"version":3,"mappings":"AA+BA;;;AAGA,OAAM,SAAUA,iBAAiB,GAA4C;EAAA,IAA3CC,4EAAe,EAAE;EAAA,IAAEC,MAAwB;;EAC3E,MAAMC,OAAO,GAAG,WAAK,CAACD,MAAM,CAACE,OAAO,CAAC,0CAAEC,WAAW;EAClD,IAAI,CAACF,OAAO,IAAID,MAAM,CAACG,WAAW,IAAIF,OAAO,EAAE;IAC7C,IAAID,MAAM,CAACI,IAAI,KAAK,eAAe,EAAE;MACnC,IAAIC,QAAQ,GAAGL,MAAM,CAACD,KAAK;MAC3B;MACA,MAAMO,QAAQ,GAAG,iBAAK,CAACN,MAAM,CAACE,OAAO,CAAC,0CAAEH,KAAK,mCAAI,EAAE;MACnD,KAAK,MAAM,CAACQ,OAAO,EAAEC,OAAO,CAAC,IAAIC,MAAM,CAACD,OAAO,CAACF,QAAQ,CAAC,EAAE;QACzDD,QAAQ,mCACHA,QAAQ;UACX,CAACE,OAAO,GAACE,gCACJD,OAAO,GACPH,QAAQ,CAACE,OAAO,CAAC;QAAA,EAEvB;;MAEH,uCACKR,KAAK;QACR,CAACC,MAAM,CAACE,OAAO,GAAG;UAAEC,WAAW,EAAEH,MAAM,CAACG,WAAW;UAAEJ,KAAK,EAAEM;QAAQ;MAAE;KAEzE,MAAM,IAAIL,MAAM,CAACI,IAAI,KAAK,aAAa,EAAE;MACxC,uCACKL,KAAK;QACR,CAACC,MAAM,CAACE,OAAO,GAACO,gCAAOV,KAAK,CAACC,MAAM,CAACE,OAAO,CAAC;UAAEC,WAAW,EAAEH,MAAM,CAACG,WAAW;UAAEO,KAAK,EAAEV,MAAM,CAACU;QAAK;MAAA;;;EAIxG,OAAOX,KAAK;AACd","names":["chainStateReducer","state","action","current","chainId","blockNumber","type","newState","oldState","address","entries","Object","error"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/chainState/common/chainStateReducer.ts"],"sourcesContent":["import { ChainState } from './model'\n\nexport interface State {\n  [chainId: number]:\n    | {\n        blockNumber: number\n        state?: ChainState\n        error?: unknown\n      }\n    | undefined\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type ChainStateAction = FetchSuccess | FetchError\n\ninterface FetchSuccess {\n  type: 'FETCH_SUCCESS'\n  chainId: number\n  blockNumber: number\n  state: ChainState\n}\n\ninterface FetchError {\n  type: 'FETCH_ERROR'\n  chainId: number\n  blockNumber: number\n  error: unknown\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state: State = {}, action: ChainStateAction) {\n  const current = state[action.chainId]?.blockNumber\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state\n      // merge with existing state\n      const oldState = state[action.chainId]?.state ?? {}\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = {\n          ...newState,\n          [address]: {\n            ...entries,\n            ...newState[address],\n          },\n        }\n      }\n      return {\n        ...state,\n        [action.chainId]: { blockNumber: action.blockNumber, state: newState },\n      }\n    } else if (action.type === 'FETCH_ERROR') {\n      return {\n        ...state,\n        [action.chainId]: { ...state[action.chainId], blockNumber: action.blockNumber, error: action.error },\n      }\n    }\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}