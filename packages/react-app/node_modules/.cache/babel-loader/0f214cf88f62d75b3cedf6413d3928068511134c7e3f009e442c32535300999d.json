{"ast":null,"code":"import { useContext } from 'react';\nimport { getChainById } from '../helpers';\nimport { ConfigContext } from '../providers';\nconst validConfigs = configs => {\n  if (!(configs === null || configs === void 0 ? void 0 : configs.networks) || (configs === null || configs === void 0 ? void 0 : configs.networks.length) === 0) {\n    console.warn('No networks or supportedChain configured');\n  }\n  return configs;\n};\n/**\n * Returns singleton instance of {@link Config}.\n * Takes no parameters.\n * @public\n */\nexport function useConfig() {\n  var _a;\n  const {\n    config\n  } = useContext(ConfigContext);\n  // backward compatible with supportedChains\n  if (config.supportedChains) {\n    console.warn('supportedChain is deprecated, please pass networks instead');\n    const networks = (_a = config.supportedChains) === null || _a === void 0 ? void 0 : _a.map(chainId => getChainById(chainId));\n    return validConfigs(Object.assign(Object.assign({}, config), {\n      networks\n    }));\n  }\n  return validConfigs(config);\n}\n/**\n * @public\n */\nexport function useUpdateConfig() {\n  const {\n    updateConfig\n  } = useContext(ConfigContext);\n  return updateConfig;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,cAAc;AAE5C,MAAMC,YAAY,GAAIC,OAAmB,IAAwC;EAC/E,IAAI,EAACA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,QAAQ,KAAI,QAAO,aAAPD,OAAO,uBAAPA,OAAO,CAAEC,QAAQ,CAACC,MAAM,MAAK,CAAC,EAAE;IACxDC,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;;EAE1D,OAAOJ,OAAO;AAChB,CAAC;AAED;;;;;AAKA,OAAM,SAAUK,SAAS;;EACvB,MAAM;IAAEC;EAAM,CAAE,GAAGV,UAAU,CAACE,aAAa,CAAC;EAE5C;EACA,IAAIQ,MAAM,CAACC,eAAe,EAAE;IAC1BJ,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC;IAC1E,MAAMH,QAAQ,GAAY,YAAM,CAACM,eAAe,0CAAEC,GAAG,CAAEC,OAAO,IAAKZ,YAAY,CAACY,OAAO,CAAC,CAAY;IACpG,OAAOV,YAAY,iCACdO,MAAM;MACTL;IAAQ,GACR;;EAGJ,OAAOF,YAAY,CAACO,MAAM,CAAC;AAC7B;AAEA;;;AAGA,OAAM,SAAUI,eAAe;EAC7B,MAAM;IAAEC;EAAY,CAAE,GAAGf,UAAU,CAACE,aAAa,CAAC;EAClD,OAAOa,YAAY;AACrB","names":["useContext","getChainById","ConfigContext","validConfigs","configs","networks","length","console","warn","useConfig","config","supportedChains","map","chainId","useUpdateConfig","updateConfig"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useConfig.ts"],"sourcesContent":["import { useContext } from 'react'\nimport { Chain, FullConfig } from '../constants'\nimport { getChainById } from '../helpers'\nimport { ConfigContext } from '../providers'\n\nconst validConfigs = (configs: FullConfig): FullConfig | Record<string, never> => {\n  if (!configs?.networks || configs?.networks.length === 0) {\n    console.warn('No networks or supportedChain configured')\n  }\n  return configs\n}\n\n/**\n * Returns singleton instance of {@link Config}.\n * Takes no parameters.\n * @public\n */\nexport function useConfig() {\n  const { config } = useContext(ConfigContext)\n\n  // backward compatible with supportedChains\n  if (config.supportedChains) {\n    console.warn('supportedChain is deprecated, please pass networks instead')\n    const networks: Chain[] = config.supportedChains?.map((chainId) => getChainById(chainId)) as Chain[]\n    return validConfigs({\n      ...config,\n      networks,\n    })\n  }\n\n  return validConfigs(config)\n}\n\n/**\n * @public\n */\nexport function useUpdateConfig() {\n  const { updateConfig } = useContext(ConfigContext)\n  return updateConfig\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}