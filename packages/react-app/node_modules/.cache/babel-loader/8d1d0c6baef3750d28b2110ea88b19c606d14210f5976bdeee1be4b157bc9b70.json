{"ast":null,"code":"import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n  const timeFromCreation = creationTime => Date.now() - creationTime;\n  return notifications.filter(notification => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addNotification,\n    notifications,\n    removeNotification\n  } = useNotificationsContext();\n  const {\n    notifications: {\n      checkInterval,\n      expirationPeriod\n    }\n  } = useConfig();\n  const chainNotifications = useMemo(() => {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(() => {\n    if (!chainId) {\n      return;\n    }\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n    for (const notification of expiredNotification) {\n      removeNotification({\n        notificationId: notification.id,\n        chainId\n      });\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAAuBC,uBAAuB,QAAQ,cAAc;AACpE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,UAAU;AAEpC,SAASC,uBAAuB,CAACC,aAA6B,EAAEC,gBAAwB;EACtF,IAAIA,gBAAgB,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;;EAEX,MAAMC,gBAAgB,GAAIC,YAAoB,IAAKC,IAAI,CAACC,GAAG,EAAE,GAAGF,YAAY;EAE5E,OAAOH,aAAa,CAACM,MAAM,CAAEC,YAAY,IAAKL,gBAAgB,CAACK,YAAY,CAACC,WAAW,CAAC,IAAIP,gBAAgB,CAAC;AAC/G;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAUQ,gBAAgB;EAC9B,MAAM;IAAEC,OAAO;IAAEC;EAAO,CAAE,GAAGf,SAAS,EAAE;EACxC,MAAM;IAAEgB,eAAe;IAAEZ,aAAa;IAAEa;EAAkB,CAAE,GAAGlB,uBAAuB,EAAE;EACxF,MAAM;IACJK,aAAa,EAAE;MAAEc,aAAa;MAAEb;IAAgB;EAAE,CACnD,GAAGH,SAAS,EAAE;EAEf,MAAMiB,kBAAkB,GAAGrB,OAAO,CAAC,MAAK;;IACtC,IAAIgB,OAAO,KAAKM,SAAS,IAAI,CAACL,OAAO,EAAE;MACrC,OAAO,EAAE;;IAEX,OAAO,mBAAa,CAACD,OAAO,CAAC,mCAAI,EAAE;EACrC,CAAC,EAAE,CAACV,aAAa,EAAEU,OAAO,EAAEC,OAAO,CAAC,CAAC;EAErCd,WAAW,CAAC,MAAK;IACf,IAAI,CAACa,OAAO,EAAE;MACZ;;IAGF,MAAMO,mBAAmB,GAAGlB,uBAAuB,CAACgB,kBAAkB,EAAEd,gBAAgB,CAAC;IACzF,KAAK,MAAMM,YAAY,IAAIU,mBAAmB,EAAE;MAC9CJ,kBAAkB,CAAC;QAAEK,cAAc,EAAEX,YAAY,CAACY,EAAE;QAAET;MAAO,CAAE,CAAC;;EAEpE,CAAC,EAAEI,aAAa,CAAC;EAEjB,OAAO;IACLd,aAAa,EAAEe,kBAAkB;IACjCH,eAAe;IACfC;GACD;AACH","names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","chainId","account","addNotification","removeNotification","checkInterval","chainNotifications","undefined","expiredNotification","notificationId","id"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useNotifications.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Notification, useNotificationsContext } from '../providers'\nimport { useEthers } from './useEthers'\nimport { useInterval } from './useInterval'\nimport { useConfig } from '../hooks'\n\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\n  if (expirationPeriod === 0) {\n    return []\n  }\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\n\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\n}\n\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const { chainId, account } = useEthers()\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\n  const {\n    notifications: { checkInterval, expirationPeriod },\n  } = useConfig()\n\n  const chainNotifications = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return notifications[chainId] ?? []\n  }, [notifications, chainId, account])\n\n  useInterval(() => {\n    if (!chainId) {\n      return\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\n    for (const notification of expiredNotification) {\n      removeNotification({ notificationId: notification.id, chainId })\n    }\n  }, checkInterval)\n\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}