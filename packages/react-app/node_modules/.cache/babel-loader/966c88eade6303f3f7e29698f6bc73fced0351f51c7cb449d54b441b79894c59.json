{"ast":null,"code":"import { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nconst ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\nexport const multicall1Factory = fastEncoding => fastEncoding ? fastEncodingMulticall : multicall;\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const contract = new Contract(address, ABI, provider);\n  const [, results] = await contract.aggregate(requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const response = await provider.call({\n    to: address,\n    data: encodeAggregate(requests.map(_ref2 => {\n      let {\n        address,\n        data\n      } = _ref2;\n      return [address, data];\n    }))\n  }, blockNumber);\n  const [, results] = decodeAggregate(response);\n  return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  const state = {};\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const result = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,QAAQ;AAEjC,SAASC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAIzE,MAAMC,GAAG,GAAG,CACV,0HAA0H,CAC3H;AAED;;;AAGA,OAAO,MAAMC,iBAAiB,GAAIC,YAAqB,IAAMA,YAAY,GAAGC,qBAAqB,GAAGC,SAAU;AAE9G;;;AAGA,OAAO,eAAeA,SAAS,CAC7BC,QAA4B,EAC5BC,OAAe,EACfC,WAAmB,EACnBC,QAAmB;EAEnB,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,EAAE;;EAEX,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACS,OAAO,EAAEN,GAAG,EAAEK,QAAQ,CAAC;EACrD,MAAM,GAAGM,OAAO,CAAC,GAA0B,MAAMD,QAAQ,CAACE,SAAS,CACjEJ,QAAQ,CAACK,GAAG,CAAC;IAAA,IAAC;MAAEP,OAAO;MAAEQ;IAAI,CAAE;IAAA,OAAK,CAACR,OAAO,EAAEQ,IAAI,CAAC;EAAA,EAAC,EACpD;IAAEC,QAAQ,EAAER;EAAW,CAAE,CAC1B;EACD,OAAOS,YAAY,CAACL,OAAO,EAAEH,QAAQ,CAAC;AACxC;AAEA;;;AAGA,OAAO,eAAeL,qBAAqB,CACzCE,QAA4B,EAC5BC,OAAe,EACfC,WAAmB,EACnBC,QAAmB;EAEnB,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,EAAE;;EAEX,MAAMQ,QAAQ,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAClC;IACEC,EAAE,EAAEb,OAAO;IACXQ,IAAI,EAAEhB,eAAe,CAACU,QAAQ,CAACK,GAAG,CAAC;MAAA,IAAC;QAAEP,OAAO;QAAEQ;MAAI,CAAE;MAAA,OAAK,CAACR,OAAO,EAAEQ,IAAI,CAAC;IAAA,EAAC;GAC3E,EACDP,WAAW,CACZ;EACD,MAAM,GAAGI,OAAO,CAAC,GAAGZ,eAAe,CAACkB,QAAQ,CAAC;EAC7C,OAAOD,YAAY,CAACL,OAAO,EAAEH,QAAQ,CAAC;AACxC;AAEA,SAASQ,YAAY,CAACL,OAAiB,EAAEH,QAAmB;;EAC1D,MAAMY,KAAK,GAAe,EAAE;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,CAACC,MAAM,EAAEY,CAAC,EAAE,EAAE;IACxC,MAAM;MAAEf,OAAO;MAAEQ;IAAI,CAAE,GAAGN,QAAQ,CAACa,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGX,OAAO,CAACU,CAAC,CAAC;IACzB,MAAME,eAAe,GAAG,WAAK,CAACjB,OAAO,CAAC,mCAAI,EAAE;IAC5CiB,eAAe,CAACT,IAAI,CAAC,GAAG;MAAEU,KAAK,EAAEF,MAAM;MAAEG,OAAO,EAAE;IAAI,CAAE;IACxDL,KAAK,CAACd,OAAO,CAAC,GAAGiB,eAAe;;EAElC,OAAOH,KAAK;AACd","names":["Contract","encodeAggregate","decodeAggregate","ABI","multicall1Factory","fastEncoding","fastEncodingMulticall","multicall","provider","address","blockNumber","requests","length","contract","results","aggregate","map","data","blockTag","decodeResult","response","call","to","state","i","result","stateForAddress","value","success"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/chainState/common/multicall.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { Contract } from 'ethers'\nimport type { providers } from 'ethers'\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n]\n\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall : multicall)\n\n/**\n * @public\n */\nexport async function multicall(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const [, results]: [BigNumber, string[]] = await contract.aggregate(\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    },\n    blockNumber\n  )\n  const [, results] = decodeAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: string[], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const result = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { value: result, success: true }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}