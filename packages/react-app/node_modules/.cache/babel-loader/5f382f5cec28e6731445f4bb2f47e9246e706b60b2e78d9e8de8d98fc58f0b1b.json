{"ast":null,"code":"import { providers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Event } from '../../../../helpers/event';\nconst GET_COINBASE_LINK = 'https://www.coinbase.com/wallet';\nexport async function getCoinbaseProvider() {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_COINBASE_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isWalletLink) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider || !injectedProvider.isWalletLink) {\n    console.log(`Coinbase wallet is not installed - you can get it under ${GET_COINBASE_LINK}`);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  return provider;\n}\nexport class CoinbaseWalletConnector {\n  constructor() {\n    this.name = 'CoinbaseWallet';\n    this.update = new Event();\n  }\n  async init() {\n    if (this.provider) return;\n    const metamask = await getCoinbaseProvider();\n    if (!metamask) {\n      return;\n    }\n    this.provider = metamask;\n  }\n  async connectEagerly() {\n    await this.init();\n    if (!this.provider) {\n      return;\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  async activate() {\n    await this.init();\n    if (!this.provider) {\n      throw new Error('Could not activate connector');\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_requestAccounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.log(e);\n      throw new Error('Could not activate connector');\n    }\n  }\n  async deactivate() {\n    this.provider = undefined;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,QAAQ;AAClC,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,SAASC,KAAK,QAAQ,2BAA2B;AAEjD,MAAMC,iBAAiB,GAAG,iCAAiC;AAE3D,OAAO,eAAeC,mBAAmB;;EACvC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpBD,MAAM,CAACE,IAAI,CAACJ,iBAAiB,CAAC;IAC9B,OAAOK,SAAS;;EAGlB,MAAMC,iBAAiB,GAAU,CAACJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,QAAgB,EAACN,SAAS,IAAI,EAAE;EAC1E,MAAMU,gBAAgB,GACpB,uBAAiB,CAACC,IAAI,CAAEC,QAAQ,IAAI;;IAClC,OAAO,cAAQ,CAACC,YAAY,mCAAI,KAAK;EACvC,CAAC,CAAC,mCAAK,MAAMZ,sBAAsB,EAAG;EAExC,IAAI,CAACS,gBAAgB,IAAI,CAACA,gBAAgB,CAACG,YAAY,EAAE;IACvDC,OAAO,CAACC,GAAG,CAAC,2DAA2DZ,iBAAiB,EAAE,CAAC;IAC3F,OAAOK,SAAS;;EAGlB,MAAMI,QAAQ,GAAG,IAAIZ,SAAS,CAACgB,YAAY,CAACN,gBAAgB,EAAE,KAAK,CAAC;EACpE,OAAOE,QAAQ;AACjB;AAEA,OAAM,MAAOK,uBAAuB;EAApCC;IAEkB,SAAI,GAAG,gBAAgB;IAE9B,WAAM,GAAG,IAAIhB,KAAK,EAAuB;EA+CpD;EA7CU,MAAMiB,IAAI;IAChB,IAAI,IAAI,CAACP,QAAQ,EAAE;IACnB,MAAMQ,QAAQ,GAAG,MAAMhB,mBAAmB,EAAE;IAC5C,IAAI,CAACgB,QAAQ,EAAE;MACb;;IAEF,IAAI,CAACR,QAAQ,GAAGQ,QAAQ;EAC1B;EAEA,MAAMC,cAAc;IAClB,MAAM,IAAI,CAACF,IAAI,EAAE;IAEjB,IAAI,CAAC,IAAI,CAACP,QAAQ,EAAE;MAClB;;IAGF,IAAI;MACF,MAAMU,OAAO,GAAW,MAAM,IAAI,CAACV,QAAS,CAACW,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;MACpE,MAAMC,QAAQ,GAAa,MAAM,IAAI,CAACZ,QAAS,CAACW,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;MACxE,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC;QAAEJ,OAAO,EAAEK,QAAQ,CAACL,OAAO,CAAC;QAAEE;MAAQ,CAAE,CAAC;KAC3D,CAAC,OAAOI,CAAC,EAAE;MACVd,OAAO,CAACe,KAAK,CAACD,CAAC,CAAC;;EAEpB;EAEA,MAAME,QAAQ;IACZ,MAAM,IAAI,CAACX,IAAI,EAAE;IAEjB,IAAI,CAAC,IAAI,CAACP,QAAQ,EAAE;MAClB,MAAM,IAAImB,KAAK,CAAC,8BAA8B,CAAC;;IAGjD,IAAI;MACF,MAAMT,OAAO,GAAW,MAAM,IAAI,CAACV,QAAS,CAACW,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;MACpE,MAAMC,QAAQ,GAAa,MAAM,IAAI,CAACZ,QAAS,CAACW,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC/E,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC;QAAEJ,OAAO,EAAEK,QAAQ,CAACL,OAAO,CAAC;QAAEE;MAAQ,CAAE,CAAC;KAC3D,CAAC,OAAOI,CAAC,EAAE;MACVd,OAAO,CAACC,GAAG,CAACa,CAAC,CAAC;MACd,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;;EAEnD;EAEA,MAAMC,UAAU;IACd,IAAI,CAACpB,QAAQ,GAAGJ,SAAS;EAC3B","names":["providers","detectEthereumProvider","Event","GET_COINBASE_LINK","getCoinbaseProvider","window","ethereum","open","undefined","injectedProviders","injectedProvider","find","provider","isWalletLink","console","log","Web3Provider","CoinbaseWalletConnector","constructor","init","metamask","connectEagerly","chainId","send","accounts","update","emit","parseInt","e","debug","activate","Error","deactivate"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/network/connectors/implementations/coinbase.ts"],"sourcesContent":["import { Connector, ConnectorUpdateData } from '../connector'\nimport { providers } from 'ethers'\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport { Event } from '../../../../helpers/event'\n\nconst GET_COINBASE_LINK = 'https://www.coinbase.com/wallet'\n\nexport async function getCoinbaseProvider() {\n  if (!window.ethereum) {\n    window.open(GET_COINBASE_LINK)\n    return undefined\n  }\n\n  const injectedProviders: any[] = (window?.ethereum as any).providers || []\n  const injectedProvider: any =\n    injectedProviders.find((provider) => {\n      return provider.isWalletLink ?? false\n    }) ?? (await detectEthereumProvider())\n\n  if (!injectedProvider || !injectedProvider.isWalletLink) {\n    console.log(`Coinbase wallet is not installed - you can get it under ${GET_COINBASE_LINK}`)\n    return undefined\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any')\n  return provider\n}\n\nexport class CoinbaseWalletConnector implements Connector {\n  public provider?: providers.Web3Provider\n  public readonly name = 'CoinbaseWallet'\n\n  readonly update = new Event<ConnectorUpdateData>()\n\n  private async init() {\n    if (this.provider) return\n    const metamask = await getCoinbaseProvider()\n    if (!metamask) {\n      return\n    }\n    this.provider = metamask\n  }\n\n  async connectEagerly(): Promise<void> {\n    await this.init()\n\n    if (!this.provider) {\n      return\n    }\n\n    try {\n      const chainId: string = await this.provider!.send('eth_chainId', [])\n      const accounts: string[] = await this.provider!.send('eth_accounts', [])\n      this.update.emit({ chainId: parseInt(chainId), accounts })\n    } catch (e) {\n      console.debug(e)\n    }\n  }\n\n  async activate(): Promise<void> {\n    await this.init()\n\n    if (!this.provider) {\n      throw new Error('Could not activate connector')\n    }\n\n    try {\n      const chainId: string = await this.provider!.send('eth_chainId', [])\n      const accounts: string[] = await this.provider!.send('eth_requestAccounts', [])\n      this.update.emit({ chainId: parseInt(chainId), accounts })\n    } catch (e) {\n      console.log(e)\n      throw new Error('Could not activate connector')\n    }\n  }\n\n  async deactivate(): Promise<void> {\n    this.provider = undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}