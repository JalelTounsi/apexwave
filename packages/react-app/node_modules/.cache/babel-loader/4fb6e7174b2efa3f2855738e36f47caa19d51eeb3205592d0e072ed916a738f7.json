{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n  const chainId = useChainId();\n  const readOnlyNetworks = useReadonlyNetworks();\n  const {\n    connector\n  } = useConnector();\n  const [blockNumber, setBlockNumber] = useState();\n  const isActive = useWindow();\n  const isMounted = useIsMounted();\n  useEffect(() => {\n    if (!isActive) {\n      return;\n    }\n    const readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n    if (readOnlyNetwork) {\n      const unsub = subscribeToNewBlock(readOnlyNetwork, chainId, _ref => {\n        let {\n          blockNumber\n        } = _ref;\n        if (isMounted()) {\n          setBlockNumber(blockNumber);\n        }\n      }, isActive);\n      return () => unsub();\n    }\n    if (!connector) {\n      return;\n    }\n    const unsub = connector.newBlock.on(blockNumber => {\n      if (isMounted()) {\n        setBlockNumber(blockNumber);\n      }\n    });\n    return () => unsub();\n  }, [isActive, readOnlyNetworks, connector, chainId]);\n  const debouncedBlockNumber = useDebounce(blockNumber, 100);\n  return debouncedBlockNumber;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,SAAS,QAAQ,cAAc;AAClF,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,YAAY,QAAQ,gBAAgB;AAE7C;;;;;AAKA,OAAM,SAAUC,cAAc;EAC5B,MAAMC,OAAO,GAAGJ,UAAU,EAAE;EAC5B,MAAMK,gBAAgB,GAAGR,mBAAmB,EAAE;EAC9C,MAAM;IAAES;EAAS,CAAE,GAAGP,YAAY,EAAE;EACpC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,EAAU;EACxD,MAAMc,QAAQ,GAAGX,SAAS,EAAE;EAC5B,MAAMY,SAAS,GAAGR,YAAY,EAAE;EAEhCR,SAAS,CAAC,MAAK;IACb,IAAI,CAACe,QAAQ,EAAE;MACb;;IAGF,MAAME,eAAe,GAAGP,OAAO,IAAIC,gBAAgB,CAAED,OAA8B,CAAC;IACpF,IAAIO,eAAe,EAAE;MACnB,MAAMC,KAAK,GAAGhB,mBAAmB,CAC/Be,eAAe,EACfP,OAAO,EACP,QAAoB;QAAA,IAAnB;UAAEG;QAAW,CAAE;QACd,IAAIG,SAAS,EAAE,EAAE;UACfF,cAAc,CAACD,WAAW,CAAC;;MAE/B,CAAC,EACDE,QAAQ,CACT;MACD,OAAO,MAAMG,KAAK,EAAE;;IAGtB,IAAI,CAACN,SAAS,EAAE;MACd;;IAEF,MAAMM,KAAK,GAAGN,SAAS,CAACO,QAAQ,CAACC,EAAE,CAAEP,WAAW,IAAI;MAClD,IAAIG,SAAS,EAAE,EAAE;QACfF,cAAc,CAACD,WAAW,CAAC;;IAE/B,CAAC,CAAC;IACF,OAAO,MAAMK,KAAK,EAAE;EACtB,CAAC,EAAE,CAACH,QAAQ,EAAEJ,gBAAgB,EAAEC,SAAS,EAAEF,OAAO,CAAC,CAAC;EAEpD,MAAMW,oBAAoB,GAAGd,WAAW,CAACM,WAAW,EAAE,GAAG,CAAC;EAC1D,OAAOQ,oBAAoB;AAC7B","names":["useEffect","useState","subscribeToNewBlock","useReadonlyNetworks","useWindow","useConnector","useChainId","useDebounce","useIsMounted","useBlockNumber","chainId","readOnlyNetworks","connector","blockNumber","setBlockNumber","isActive","isMounted","readOnlyNetwork","unsub","newBlock","on","debouncedBlockNumber"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useBlockNumber.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport type { ChainId } from '../constants'\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers'\nimport { useConnector } from '../providers/network/connectors'\nimport { useChainId } from './useChainId'\nimport { useDebounce } from './useDebounce'\nimport { useIsMounted } from './useIsMounted'\n\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber(): number | undefined {\n  const chainId = useChainId()\n  const readOnlyNetworks = useReadonlyNetworks()\n  const { connector } = useConnector()\n  const [blockNumber, setBlockNumber] = useState<number>()\n  const isActive = useWindow()\n  const isMounted = useIsMounted()\n\n  useEffect(() => {\n    if (!isActive) {\n      return\n    }\n\n    const readOnlyNetwork = chainId && readOnlyNetworks[(chainId as unknown) as ChainId]\n    if (readOnlyNetwork) {\n      const unsub = subscribeToNewBlock(\n        readOnlyNetwork,\n        chainId,\n        ({ blockNumber }) => {\n          if (isMounted()) {\n            setBlockNumber(blockNumber)\n          }\n        },\n        isActive\n      )\n      return () => unsub()\n    }\n\n    if (!connector) {\n      return\n    }\n    const unsub = connector.newBlock.on((blockNumber) => {\n      if (isMounted()) {\n        setBlockNumber(blockNumber)\n      }\n    })\n    return () => unsub()\n  }, [isActive, readOnlyNetworks, connector, chainId])\n\n  const debouncedBlockNumber = useDebounce(blockNumber, 100)\n  return debouncedBlockNumber\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}