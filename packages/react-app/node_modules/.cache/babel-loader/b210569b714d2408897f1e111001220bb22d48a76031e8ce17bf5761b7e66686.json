{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = name => {\n  const {\n    library\n  } = useEthers();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [address, setAddress] = useState();\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !name) return;\n      try {\n        setIsLoading(true);\n        const resolved = await library.resolveName(name);\n        if (!mounted) return;\n        setAddress(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address,\n    isLoading,\n    error\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,aAAa;AAEvC;;;;;;;;;AASA,OAAO,MAAMC,cAAc,GAAIC,IAAwB,IAAI;EACzD,MAAM;IAAEC;EAAO,CAAE,GAAGH,SAAS,EAAE;EAC/B,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAe,IAAI,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,EAAiB;EAEvDD,SAAS,CAAC,MAAK;IACb,IAAIY,OAAO,GAAG,IAAI;IAElB,KAAK,CAAC,YAAW;MACf,IAAI,CAACP,OAAO,IAAI,CAACD,IAAI,EAAE;MACvB,IAAI;QACFG,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMM,QAAQ,GAAG,MAAMR,OAAO,CAACS,WAAW,CAACV,IAAI,CAAC;QAChD,IAAI,CAACQ,OAAO,EAAE;QACdD,UAAU,CAACE,QAAQ,CAAC;OACrB,CAAC,OAAOE,CAAM,EAAE;QACf,IAAI,CAACH,OAAO,EAAE;QACdH,QAAQ,CAACM,CAAC,CAAC;OACZ,SAAS;QACRR,YAAY,CAAC,KAAK,CAAC;;IAEvB,CAAC,GAAG;IAEJ,OAAO,MAAK;MACVK,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACP,OAAO,EAAED,IAAI,CAAC,CAAC;EAEnB,OAAO;IAAEM,OAAO;IAAEJ,SAAS;IAAEE;EAAK,CAAE;AACtC,CAAC","names":["useEffect","useState","useEthers","useResolveName","name","library","isLoading","setIsLoading","error","setError","address","setAddress","mounted","resolved","resolveName","e"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useResolveName.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers } from './useEthers'\n\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = (name: string | undefined) => {\n  const { library } = useEthers()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n  const [address, setAddress] = useState<string | null>()\n\n  useEffect(() => {\n    let mounted = true\n\n    void (async () => {\n      if (!library || !name) return\n      try {\n        setIsLoading(true)\n        const resolved = await library.resolveName(name)\n        if (!mounted) return\n        setAddress(resolved)\n      } catch (e: any) {\n        if (!mounted) return\n        setError(e)\n      } finally {\n        setIsLoading(false)\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [library, name])\n\n  return { address, isLoading, error }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}