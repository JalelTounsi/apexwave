{"ast":null,"code":"import { useContext, useEffect, useMemo } from 'react';\nimport { MultiChainStatesContext } from '../providers';\nimport { utils } from 'ethers';\n/**\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\n * The hook will cause the component to refresh when values change.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCalls} where applicable instead of this method.\n * @public\n * @param calls List of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns list of multicall calls. See {@link RawCallResult} and {@link useRawCall}.\n */\nexport function useRawCalls(calls) {\n  const {\n    dispatchCalls,\n    chains\n  } = useContext(MultiChainStatesContext);\n  useEffect(() => {\n    const filteredCalls = calls.filter(Boolean);\n    dispatchCalls({\n      type: 'ADD_CALLS',\n      calls: filteredCalls\n    });\n    return () => dispatchCalls({\n      type: 'REMOVE_CALLS',\n      calls: filteredCalls\n    });\n  }, [JSON.stringify(calls), dispatchCalls]);\n  return useMemo(() => calls.map(call => {\n    return call ? extractCallResult(chains, call) : undefined;\n  }), [JSON.stringify(calls), chains]);\n}\n/**\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCall} where applicable instead of this method.\n *\n * @param call a single call, also see {@link RawCall}.\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\n *             and there might be not enough information to perform a call.\n * @public\n * @returns result of multicall call.\n *   The hook returns {@link RawCallResult} type.\n *   That is: `undefined` when call didn't return yet or object `{ success: boolean, value: string }` if it did,\n *   `success` - boolean indicating whether call was successful or not,\n *   `value` - encoded result when success is `true` or encoded error message when success is `false`.\n */\nexport function useRawCall(call) {\n  return useRawCalls([call])[0];\n}\nfunction extractCallResult(chains, call) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n  const chainId = call.chainId;\n  if (chainId !== undefined) {\n    const rawCallResult = (_d = (_c = (_b = (_a = chains[chainId]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c[call.address.toLowerCase()]) === null || _d === void 0 ? void 0 : _d[call.data];\n    if (rawCallResult) {\n      return rawCallResult;\n    }\n    const error = (_f = (_e = chains[chainId]) === null || _e === void 0 ? void 0 : _e.value) === null || _f === void 0 ? void 0 : _f.error;\n    if (error) {\n      const defaultErrorMessage = 'An error occurred';\n      const errorMessage = (_q = (_p = (_m = (_l = (_j = (_h = (_g = error.error) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.message) !== null && _j !== void 0 ? _j : (_k = error.error) === null || _k === void 0 ? void 0 : _k.message) !== null && _l !== void 0 ? _l : error.reason) !== null && _m !== void 0 ? _m : (_o = error.data) === null || _o === void 0 ? void 0 : _o.message) !== null && _p !== void 0 ? _p : error.message) !== null && _q !== void 0 ? _q : defaultErrorMessage;\n      const value = new utils.Interface(['function Error(string)']).encodeFunctionData('Error', [errorMessage]);\n      return {\n        success: false,\n        value\n      };\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACtD,SAASC,uBAAuB,QAAuB,cAAc;AAIrE,SAASC,KAAK,QAAQ,QAAQ;AAE9B;;;;;;;;;;AAUA,OAAM,SAAUC,WAAW,CAACC,KAA0B;EACpD,MAAM;IAAEC,aAAa;IAAEC;EAAM,CAAE,GAAGR,UAAU,CAACG,uBAAuB,CAAC;EAErEF,SAAS,CAAC,MAAK;IACb,MAAMQ,aAAa,GAAGH,KAAK,CAACI,MAAM,CAACC,OAAO,CAAc;IACxDJ,aAAa,CAAC;MAAEK,IAAI,EAAE,WAAW;MAAEN,KAAK,EAAEG;IAAa,CAAE,CAAC;IAC1D,OAAO,MAAMF,aAAa,CAAC;MAAEK,IAAI,EAAE,cAAc;MAAEN,KAAK,EAAEG;IAAa,CAAE,CAAC;EAC5E,CAAC,EAAE,CAACI,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,EAAEC,aAAa,CAAC,CAAC;EAE1C,OAAOL,OAAO,CACZ,MACEI,KAAK,CAACS,GAAG,CAAEC,IAAI,IAAI;IACjB,OAAOA,IAAI,GAAGC,iBAAiB,CAACT,MAAM,EAAEQ,IAAI,CAAC,GAAGE,SAAS;EAC3D,CAAC,CAAC,EACJ,CAACL,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,EAAEE,MAAM,CAAC,CAChC;AACH;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUW,UAAU,CAACH,IAAqB;EAC9C,OAAOX,WAAW,CAAC,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B;AAEA,SAASC,iBAAiB,CAACT,MAAuB,EAAEQ,IAAa;;EAC/D,MAAMI,OAAO,GAAGJ,IAAI,CAACI,OAAO;EAC5B,IAAIA,OAAO,KAAKF,SAAS,EAAE;IACzB,MAAMG,aAAa,GAAG,8BAAM,CAACD,OAAO,CAAC,0CAAEE,KAAK,0CAAEC,KAAK,0CAAGP,IAAI,CAACQ,OAAO,CAACC,WAAW,EAAE,CAAC,0CAAGT,IAAI,CAACU,IAAI,CAAC;IAC9F,IAAIL,aAAa,EAAE;MACjB,OAAOA,aAAa;;IAEtB,MAAMM,KAAK,GAAG,kBAAM,CAACP,OAAO,CAAC,0CAAEE,KAAK,0CAAEK,KAAY;IAClD,IAAIA,KAAK,EAAE;MACT,MAAMC,mBAAmB,GAAG,mBAAmB;MAC/C,MAAMC,YAAY,GAChB,+CAAK,CAACF,KAAK,0CAAED,IAAI,0CAAEI,OAAO,mCAC1B,WAAK,CAACH,KAAK,0CAAEG,OAAO,mCACpBH,KAAK,CAACI,MAAM,mCACZ,WAAK,CAACL,IAAI,0CAAEI,OAAO,mCACnBH,KAAK,CAACG,OAAO,mCACbF,mBAAmB;MACrB,MAAMN,KAAK,GAAG,IAAIlB,KAAK,CAAC4B,SAAS,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE,CAACJ,YAAY,CAAC,CAAC;MACzG,OAAO;QACLK,OAAO,EAAE,KAAK;QACdZ;OACD;;;AAGP","names":["useContext","useEffect","useMemo","MultiChainStatesContext","utils","useRawCalls","calls","dispatchCalls","chains","filteredCalls","filter","Boolean","type","JSON","stringify","map","call","extractCallResult","undefined","useRawCall","chainId","rawCallResult","value","state","address","toLowerCase","data","error","defaultErrorMessage","errorMessage","message","reason","Interface","encodeFunctionData","success"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useRawCalls.ts"],"sourcesContent":["import { useContext, useEffect, useMemo } from 'react'\nimport { MultiChainStatesContext, RawCallResult } from '../providers'\nimport { RawCall } from '../providers'\nimport { Falsy } from '../model/types'\nimport { MultiChainState } from '../providers/chainState/multiChainStates/context'\nimport { utils } from 'ethers'\n\n/**\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\n * The hook will cause the component to refresh when values change.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCalls} where applicable instead of this method.\n * @public\n * @param calls List of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns list of multicall calls. See {@link RawCallResult} and {@link useRawCall}.\n */\nexport function useRawCalls(calls: (RawCall | Falsy)[]): RawCallResult[] {\n  const { dispatchCalls, chains } = useContext(MultiChainStatesContext)\n\n  useEffect(() => {\n    const filteredCalls = calls.filter(Boolean) as RawCall[]\n    dispatchCalls({ type: 'ADD_CALLS', calls: filteredCalls })\n    return () => dispatchCalls({ type: 'REMOVE_CALLS', calls: filteredCalls })\n  }, [JSON.stringify(calls), dispatchCalls])\n\n  return useMemo(\n    () =>\n      calls.map((call) => {\n        return call ? extractCallResult(chains, call) : undefined\n      }),\n    [JSON.stringify(calls), chains]\n  )\n}\n\n/**\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCall} where applicable instead of this method.\n *\n * @param call a single call, also see {@link RawCall}.\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\n *             and there might be not enough information to perform a call.\n * @public\n * @returns result of multicall call.\n *   The hook returns {@link RawCallResult} type.\n *   That is: `undefined` when call didn't return yet or object `{ success: boolean, value: string }` if it did,\n *   `success` - boolean indicating whether call was successful or not,\n *   `value` - encoded result when success is `true` or encoded error message when success is `false`.\n */\nexport function useRawCall(call: RawCall | Falsy) {\n  return useRawCalls([call])[0]\n}\n\nfunction extractCallResult(chains: MultiChainState, call: RawCall): RawCallResult {\n  const chainId = call.chainId\n  if (chainId !== undefined) {\n    const rawCallResult = chains[chainId]?.value?.state?.[call.address.toLowerCase()]?.[call.data]\n    if (rawCallResult) {\n      return rawCallResult\n    }\n    const error = chains[chainId]?.value?.error as any\n    if (error) {\n      const defaultErrorMessage = 'An error occurred'\n      const errorMessage =\n        error.error?.data?.message ??\n        error.error?.message ??\n        error.reason ??\n        error.data?.message ??\n        error.message ??\n        defaultErrorMessage\n      const value = new utils.Interface(['function Error(string)']).encodeFunctionData('Error', [errorMessage])\n      return {\n        success: false,\n        value,\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}