{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  const {\n    chainId: providerChainId\n  } = useEthers();\n  const [tokenList, setTokenList] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    fetch(tokenListURI).then(async response => {\n      if (response.ok) {\n        const {\n          name,\n          logoURI,\n          tokens\n        } = await response.json();\n        setTokenList({\n          name,\n          logoURI,\n          tokens: tokens.filter(token => {\n            const sameChainId = token.chainId === chainId;\n            if (!tags) {\n              return sameChainId;\n            }\n            return sameChainId && token.tags && token.tags.some(tag => tags.includes(tag));\n          })\n        });\n      } else {\n        const errorMessage = await response.text();\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAAS,QAAQ,aAAa;AAWvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,OAAM,SAAUC,YAAY,CAACC,YAAoB,EAAEC,eAAwB,EAAEC,IAAe;EAC1F,MAAM;IAAEC,OAAO,EAAEC;EAAe,CAAE,GAAGN,SAAS,EAAE;EAChD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,EAAa;EAEvD,MAAMM,OAAO,GAAGF,eAAe,IAAIG,eAAe;EAElDR,SAAS,CAAC,MAAK;IACbW,KAAK,CAACP,YAAY,CAAC,CAChBQ,IAAI,CAAC,MAAOC,QAAQ,IAAI;MACvB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,MAAM;UAAEC,IAAI;UAAEC,OAAO;UAAEC;QAAM,CAAE,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QACvDR,YAAY,CAAC;UACXK,IAAI;UACJC,OAAO;UACPC,MAAM,EAAGA,MAAsB,CAACE,MAAM,CAAEC,KAAK,IAAI;YAC/C,MAAMC,WAAW,GAAGD,KAAK,CAACb,OAAO,KAAKA,OAAO;YAC7C,IAAI,CAACD,IAAI,EAAE;cACT,OAAOe,WAAW;;YAEpB,OAAOA,WAAW,IAAID,KAAK,CAACd,IAAI,IAAIc,KAAK,CAACd,IAAI,CAACgB,IAAI,CAAEC,GAAG,IAAKjB,IAAI,CAACkB,QAAQ,CAACD,GAAG,CAAC,CAAC;UAClF,CAAC;SACF,CAAC;OACH,MAAM;QACL,MAAME,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;QAC1C,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACJ,YAAY,CAAC,CAAC;;IAElD,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAI;MACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBrB,YAAY,CAACwB,SAAS,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC9B,YAAY,EAAEG,OAAO,CAAC,CAAC;EAE3B,OAAOE,SAAS;AAClB","names":["useEffect","useState","useEthers","useTokenList","tokenListURI","overrideChainId","tags","chainId","providerChainId","tokenList","setTokenList","fetch","then","response","ok","name","logoURI","tokens","json","filter","token","sameChainId","some","tag","includes","errorMessage","text","Promise","reject","Error","catch","err","console","log","undefined"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useTokenList.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { useEthers } from './useEthers'\n\n/**\n * useTokenList return type.\n */\nexport interface TokenList {\n  name: string\n  logoURI: string\n  tokens: TokenInfo[]\n}\n\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI: string, overrideChainId?: number, tags?: string[]): TokenList | undefined {\n  const { chainId: providerChainId } = useEthers()\n  const [tokenList, setTokenList] = useState<TokenList>()\n\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    fetch(tokenListURI)\n      .then(async (response) => {\n        if (response.ok) {\n          const { name, logoURI, tokens } = await response.json()\n          setTokenList({\n            name,\n            logoURI,\n            tokens: (tokens as TokenInfo[]).filter((token) => {\n              const sameChainId = token.chainId === chainId\n              if (!tags) {\n                return sameChainId\n              }\n              return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag))\n            }),\n          })\n        } else {\n          const errorMessage = await response.text()\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setTokenList(undefined)\n      })\n  }, [tokenListURI, chainId])\n\n  return tokenList\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}