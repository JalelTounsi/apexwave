{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n  if (!filter) {\n    return;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n  if (!filter) {\n    return undefined;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter);\n    return undefined;\n  }\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash\n      };\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest'\n      };\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e;\n    } else {\n      warnOnInvalidFilter(filter);\n      return undefined;\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs(filter, result) {\n  if (!result || !filter) {\n    return undefined;\n  }\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result\n      };\n    }\n    const decodedLogs = [];\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed\n      });\n    }\n    return {\n      value: decodedLogs,\n      error: undefined\n    };\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"mappings":"AAKA;;;AAGA,OAAM,SAAUA,mBAAmB,CAACC,MAA2B;EAC7D,IAAI,CAACA,MAAM,EAAE;IACX;;EAEF,MAAM;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAI,CAAE,GAAGH,MAAM;EACxCI,OAAO,CAACC,IAAI,CAAC,oCAAoCJ,QAAQ,CAACK,OAAO,UAAUJ,KAAK,SAASC,IAAI,EAAE,CAAC;AAClG;AAEA;;;AAGA,OAAM,SAAUI,gBAAgB,CAC9BP,MAA2B,EAC3BQ,SAAoB,EACpBC,OAAkB,EAClBC,SAAkB;EAElB,IAAI,CAACV,MAAM,EAAE;IACX,OAAOW,SAAS;;EAElB,MAAM;IAAEV,QAAQ;IAAEC,KAAK;IAAEC;EAAI,CAAE,GAAGH,MAAM;EACxC,IAAI,CAACC,QAAQ,CAACK,OAAO,IAAI,CAACJ,KAAK,EAAE;IAC/BH,mBAAmB,CAACC,MAAM,CAAC;IAC3B,OAAOW,SAAS;;EAElB,IAAI;IACF,MAAMC,aAAa,GAAGX,QAAQ,CAACY,SAAS,CAACC,kBAAkB,CAAEZ,KAAwC,EAAEC,IAAI,CAAC;IAE5G,IAAIO,SAAS,EAAE;MACb,OAAO;QACLJ,OAAO,EAAEL,QAAQ,CAACK,OAAO;QACzBS,MAAM,EAAEH,aAAa;QACrBF,SAAS,EAAEA;OACS;KACvB,MAAM;MACL,OAAO;QACLJ,OAAO,EAAEL,QAAQ,CAACK,OAAO;QACzBS,MAAM,EAAEH,aAAa;QACrBJ,SAAS,EAAEA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,CAAC;QACzBC,OAAO,EAAEA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI;OACX;;GAEd,CAAC,OAAOO,CAAC,EAAE;IACV,IAAIA,CAAC,YAAYC,KAAK,EAAE;MACtB,OAAOD,CAAU;KAClB,MAAM;MACLjB,mBAAmB,CAACC,MAAM,CAAC;MAC3B,OAAOW,SAAS;;;AAGtB;AAgCA;;;AAGA,OAAM,SAAUO,UAAU,CACxBlB,MAA2B,EAC3BmB,MAA6B;EAE7B,IAAI,CAACA,MAAM,IAAI,CAACnB,MAAM,EAAE;IACtB,OAAOW,SAAS;;EAElB,IAAI;IACF,IAAIQ,MAAM,YAAYF,KAAK,EAAE;MAC3B,OAAO;QACLG,KAAK,EAAET,SAAS;QAChBU,KAAK,EAAEF;OACR;;IAGH,MAAMG,WAAW,GAA0C,EAAE;IAE7D,KAAK,MAAMC,GAAG,IAAIJ,MAAM,EAAE;MACxB,MAAMK,IAAI,GAAGxB,MAAM,CAACC,QAAQ,CAACY,SAAS,CAACY,cAAc,CAACzB,MAAM,CAACE,KAAK,EAAEqB,GAAG,CAACC,IAAI,EAAED,GAAG,CAACR,MAAM,CAAuB;MAE/GO,WAAW,CAACI,IAAI,CAAC;QACfF,IAAI;QACJG,WAAW,EAAEJ,GAAG,CAACI,WAAW;QAC5BjB,SAAS,EAAEa,GAAG,CAACb,SAAS;QACxBkB,gBAAgB,EAAEL,GAAG,CAACK,gBAAgB;QACtCC,eAAe,EAAEN,GAAG,CAACM,eAAe;QACpCC,OAAO,EAAEP,GAAG,CAACO;OACd,CAAC;;IAGJ,OAAO;MACLV,KAAK,EAAEE,WAAW;MAClBD,KAAK,EAAEV;KACR;GACF,CAAC,OAAOU,KAAK,EAAE;IACd,OAAO;MACLD,KAAK,EAAET,SAAS;MAChBU,KAAK,EAAEA;KACR;;AAEL","names":["warnOnInvalidFilter","filter","contract","event","args","console","warn","address","encodeFilterData","fromBlock","toBlock","blockHash","undefined","encodedTopics","interface","encodeFilterTopics","topics","e","Error","decodeLogs","result","value","error","decodedLogs","log","data","decodeEventLog","push","blockNumber","transactionIndex","transactionHash","removed"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/helpers/logs.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport type { BlockTag, Filter, FilterByBlockHash, Log } from '@ethersproject/abstract-provider'\nimport { TypedFilter } from '../hooks/useLogs'\nimport { Awaited, ContractEventNames, DetailedEventRecord, EventRecord, Falsy, TypedContract } from '../model/types'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter: TypedFilter | Falsy) {\n  if (!filter) {\n    return\n  }\n  const { contract, event, args } = filter\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`)\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(\n  filter: TypedFilter | Falsy,\n  fromBlock?: BlockTag,\n  toBlock?: BlockTag,\n  blockHash?: string\n): Filter | FilterByBlockHash | Falsy | Error {\n  if (!filter) {\n    return undefined\n  }\n  const { contract, event, args } = filter\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter)\n    return undefined\n  }\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics((event as unknown) as utils.EventFragment, args)\n\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash,\n      } as FilterByBlockHash\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock ?? 0,\n        toBlock: toBlock ?? 'latest',\n      } as Filter\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e as Error\n    } else {\n      warnOnInvalidFilter(filter)\n      return undefined\n    }\n  }\n}\n\n/**\n * Result of a {@link useLogs} query.\n *\n * It is `undefined` when the query didn't return yet or one of the following objects:\n *\n * - `{ value: DetailedEventRecord[], error: undefined }`, if the query succeeded,\n * - `{ value: undefined, error: Error }`, if the query failed.\n *\n * Type `DetailedEventRecord` represents a single event (log) on a typed contract:\n *\n * ```typescript\n * type DetailedEventRecord<T extends TypedContract, EN extends ContractEventNames<T>> = {\n *   data: EventRecord<T, EN>\n *   blockNumber: number\n *   blockHash: string\n *   transactionIndex: number\n *   transactionHash: string\n *   removed: boolean\n * }\n * ```\n *\n * Additional resources related to events can be found [here](https://docs.soliditylang.org/en/latest/abi-spec.html#events).\n *\n * @public\n */\nexport type LogsResult<T extends TypedContract, EN extends ContractEventNames<T>> =\n  | { value: Awaited<DetailedEventRecord<T, EN>>[]; error: undefined }\n  | { value: undefined; error: Error }\n  | undefined\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs<T extends TypedContract, EN extends ContractEventNames<T>>(\n  filter: TypedFilter | Falsy,\n  result: Log[] | Falsy | Error\n): LogsResult<T, EN> {\n  if (!result || !filter) {\n    return undefined\n  }\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result,\n      }\n    }\n\n    const decodedLogs: Awaited<DetailedEventRecord<T, EN>>[] = []\n\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics) as EventRecord<T, EN>\n\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed,\n      })\n    }\n\n    return {\n      value: decodedLogs,\n      error: undefined,\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error as Error,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}