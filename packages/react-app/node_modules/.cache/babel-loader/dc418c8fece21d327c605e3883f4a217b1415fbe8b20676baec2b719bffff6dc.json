{"ast":null,"code":"let hook;\nif (typeof window !== 'undefined') {\n  hook = window.__USEDAPP_DEVTOOLS_HOOK__;\n}\n// immediately notify devtools that the page is using it\nnotifyDevtools({\n  type: 'INIT'\n});\nexport function notifyDevtools(notification) {\n  if (!hook) {\n    return;\n  }\n  if (notification.type === 'INIT') {\n    hook.init();\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error);\n    }\n    hook.send(notification);\n  }\n}\nfunction getErrorMessage(error) {\n  if (error instanceof Error) {\n    return error.message;\n  } else {\n    return '' + error;\n  }\n}","map":{"version":3,"mappings":"AAkEA,IAAIA,IAAS;AACb,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EACjCD,IAAI,GAAIC,MAAc,CAACC,yBAAyB;;AAGlD;AACAC,cAAc,CAAC;EAAEC,IAAI,EAAE;AAAM,CAAE,CAAC;AAEhC,OAAM,SAAUD,cAAc,CAACE,YAA0B;EACvD,IAAI,CAACL,IAAI,EAAE;IACT;;EAEF,IAAIK,YAAY,CAACD,IAAI,KAAK,MAAM,EAAE;IAChCJ,IAAI,CAACM,IAAI,EAAE;GACZ,MAAM;IACL,IAAID,YAAY,CAACD,IAAI,KAAK,iBAAiB,IAAIC,YAAY,CAACD,IAAI,KAAK,eAAe,EAAE;MACpFC,YAAY,CAACE,KAAK,GAAGC,eAAe,CAACH,YAAY,CAACE,KAAK,CAAC;;IAE1DP,IAAI,CAACS,IAAI,CAACJ,YAAY,CAAC;;AAE3B;AAEA,SAASG,eAAe,CAACD,KAAc;EACrC,IAAIA,KAAK,YAAYG,KAAK,EAAE;IAC1B,OAAOH,KAAK,CAACI,OAAO;GACrB,MAAM;IACL,OAAO,EAAE,GAAGJ,KAAK;;AAErB","names":["hook","window","__USEDAPP_DEVTOOLS_HOOK__","notifyDevtools","type","notification","init","error","getErrorMessage","send","Error","message"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/devtools.ts"],"sourcesContent":["import { RawCall, ChainState } from './chainState'\n\n// NOTE: If you modify this file please ensure consistency with\n// packages/extension/src/providers/events/Message.ts\n\ninterface Init {\n  type: 'INIT'\n}\n\ninterface NetworkChanged {\n  type: 'NETWORK_CHANGED'\n  chainId?: number\n  multicallAddress?: string\n}\n\ninterface BlockNumberChanged {\n  type: 'BLOCK_NUMBER_CHANGED'\n  chainId: number\n  blockNumber: number\n}\n\ninterface AccountChanged {\n  type: 'ACCOUNT_CHANGED'\n  address?: string\n}\n\ninterface CallsChanged {\n  type: 'CALLS_CHANGED'\n  chainId?: number\n  calls: RawCall[]\n}\n\ninterface MulticallSuccess {\n  type: 'MULTICALL_SUCCESS'\n  multicallAddress: string\n  duration: number\n  chainId: number\n  blockNumber: number\n  state: ChainState\n}\n\ninterface MulticallError {\n  type: 'MULTICALL_ERROR'\n  multicallAddress: string\n  duration: number\n  calls: RawCall[]\n  chainId: number\n  blockNumber: number\n  error: any\n}\n\ninterface GenericError {\n  type: 'GENERIC_ERROR'\n  error: Error\n}\n\ntype Notification =\n  | Init\n  | NetworkChanged\n  | BlockNumberChanged\n  | AccountChanged\n  | CallsChanged\n  | MulticallSuccess\n  | MulticallError\n  | GenericError\n\nlet hook: any\nif (typeof window !== 'undefined') {\n  hook = (window as any).__USEDAPP_DEVTOOLS_HOOK__\n}\n\n// immediately notify devtools that the page is using it\nnotifyDevtools({ type: 'INIT' })\n\nexport function notifyDevtools(notification: Notification) {\n  if (!hook) {\n    return\n  }\n  if (notification.type === 'INIT') {\n    hook.init()\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error)\n    }\n    hook.send(notification)\n  }\n}\n\nfunction getErrorMessage(error: unknown) {\n  if (error instanceof Error) {\n    return error.message\n  } else {\n    return '' + error\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}