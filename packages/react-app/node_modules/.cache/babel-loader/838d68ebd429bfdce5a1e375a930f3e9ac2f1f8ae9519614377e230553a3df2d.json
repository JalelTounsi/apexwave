{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport LocalStorage from '../helpers/LocalStorage';\nimport { useConfig } from './useConfig';\nfunction getItem(key, storage) {\n  const item = storage.getItem(key);\n  if (item !== null) {\n    try {\n      return JSON.parse(item);\n    } catch (_a) {\n      // ignore error\n    }\n  }\n}\nfunction setItem(key, value, storage) {\n  if (value === undefined) {\n    storage.removeItem(key);\n  } else {\n    const toStore = JSON.stringify(value);\n    storage.setItem(key, toStore);\n    return JSON.parse(toStore);\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n  const {\n    localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage()\n  } = useConfig();\n  const [value, setValue] = useState(() => getItem(key, localStorageOverride));\n  useEffect(() => {\n    setValue(getItem(key, localStorageOverride));\n  }, [key]);\n  useEffect(() => {\n    setItem(key, value, localStorageOverride);\n  }, [value]);\n  // As value updating relies on useEffect, it takes multiple rerenders to fully update the value.\n  // The third element in the return array allows to get the immediate value stored in the localStorage.\n  return [value, setValue, () => getItem(key, localStorageOverride)];\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,SAASC,SAAS,QAAQ,aAAa;AAEvC,SAASC,OAAO,CAACC,GAAW,EAAEC,OAA2C;EACvE,MAAMC,IAAI,GAAGD,OAAO,CAACF,OAAO,CAACC,GAAG,CAAC;EACjC,IAAIE,IAAI,KAAK,IAAI,EAAE;IACjB,IAAI;MACF,OAAOC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;KACxB,CAAC,WAAM;MACN;IAAA;;AAGN;AAEA,SAASG,OAAO,CAACL,GAAW,EAAEM,KAAU,EAAEL,OAA2C;EACnF,IAAIK,KAAK,KAAKC,SAAS,EAAE;IACvBN,OAAO,CAACO,UAAU,CAACR,GAAG,CAAC;GACxB,MAAM;IACL,MAAMS,OAAO,GAAGN,IAAI,CAACO,SAAS,CAACJ,KAAK,CAAC;IACrCL,OAAO,CAACI,OAAO,CAACL,GAAG,EAAES,OAAO,CAAC;IAC7B,OAAON,IAAI,CAACC,KAAK,CAACK,OAAO,CAAC;;AAE9B;AAEA;;;AAGA,OAAM,SAAUE,eAAe,CAACX,GAAW;EACzC,MAAM;IACJY,oBAAoB,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,CAACC,YAAY,GAAG,IAAIjB,YAAY;EAAE,CAChG,GAAGC,SAAS,EAAE;EAEf,MAAM,CAACQ,KAAK,EAAES,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,MAAMG,OAAO,CAACC,GAAG,EAAEY,oBAAoB,CAAC,CAAC;EAE5EjB,SAAS,CAAC,MAAK;IACboB,QAAQ,CAAChB,OAAO,CAACC,GAAG,EAAEY,oBAAoB,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACZ,GAAG,CAAC,CAAC;EAETL,SAAS,CAAC,MAAK;IACbU,OAAO,CAACL,GAAG,EAAEM,KAAK,EAAEM,oBAAoB,CAAC;EAC3C,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX;EACA;EACA,OAAO,CAACA,KAAK,EAAES,QAAQ,EAAE,MAAMhB,OAAO,CAACC,GAAG,EAAEY,oBAAoB,CAAC,CAAU;AAC7E","names":["useEffect","useState","LocalStorage","useConfig","getItem","key","storage","item","JSON","parse","setItem","value","undefined","removeItem","toStore","stringify","useLocalStorage","localStorageOverride","window","localStorage","setValue"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport LocalStorage from '../helpers/LocalStorage'\nimport { useConfig } from './useConfig'\n\nfunction getItem(key: string, storage: WindowLocalStorage['localStorage']) {\n  const item = storage.getItem(key)\n  if (item !== null) {\n    try {\n      return JSON.parse(item)\n    } catch {\n      // ignore error\n    }\n  }\n}\n\nfunction setItem(key: string, value: any, storage: WindowLocalStorage['localStorage']) {\n  if (value === undefined) {\n    storage.removeItem(key)\n  } else {\n    const toStore = JSON.stringify(value)\n    storage.setItem(key, toStore)\n    return JSON.parse(toStore)\n  }\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key: string) {\n  const {\n    localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage(),\n  } = useConfig()\n\n  const [value, setValue] = useState(() => getItem(key, localStorageOverride))\n\n  useEffect(() => {\n    setValue(getItem(key, localStorageOverride))\n  }, [key])\n\n  useEffect(() => {\n    setItem(key, value, localStorageOverride)\n  }, [value])\n\n  // As value updating relies on useEffect, it takes multiple rerenders to fully update the value.\n  // The third element in the return array allows to get the immediate value stored in the localStorage.\n  return [value, setValue, () => getItem(key, localStorageOverride)] as const\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}