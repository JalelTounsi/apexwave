{"ast":null,"code":"/**\n * @public\n */\nexport function getStoredTransactionState(transaction) {\n  if (transaction.receipt) {\n    return transaction.receipt.status === 0 ? 'Fail' : 'Success';\n  }\n  return 'Mining';\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport const DEFAULT_STORED_TRANSACTIONS = {};","map":{"version":3,"mappings":"AAaA;;;AAGA,OAAM,SAAUA,yBAAyB,CAACC,WAA8B;EACtE,IAAIA,WAAW,CAACC,OAAO,EAAE;IACvB,OAAOD,WAAW,CAACC,OAAO,CAACC,MAAM,KAAK,CAAC,GAAG,MAAM,GAAG,SAAS;;EAE9D,OAAO,QAAQ;AACjB;AAMA;;;AAGA,OAAO,MAAMC,2BAA2B,GAAuB,EAAE","names":["getStoredTransactionState","transaction","receipt","status","DEFAULT_STORED_TRANSACTIONS"],"sources":["/Users/jaleltounsi/Documents/GitHub/apexwave.fi/apexwave/node_modules/@usedapp/core/src/providers/transactions/model.ts"],"sourcesContent":["import type { TransactionReceipt, TransactionResponse } from '@ethersproject/abstract-provider'\n\nexport interface StoredTransaction {\n  transaction: TransactionResponse\n  submittedAt: number\n  receipt?: TransactionReceipt\n  lastCheckedBlockNumber?: number\n  transactionName?: string\n  originalTransaction?: TransactionResponse\n}\n\nexport type UpdatedTransaction = Omit<StoredTransaction, 'submittedAt'> & { receipt: TransactionReceipt }\n\n/**\n * @public\n */\nexport function getStoredTransactionState(transaction: StoredTransaction) {\n  if (transaction.receipt) {\n    return transaction.receipt.status === 0 ? 'Fail' : 'Success'\n  }\n  return 'Mining'\n}\n\nexport type StoredTransactions = {\n  [chainId: number]: StoredTransaction[]\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport const DEFAULT_STORED_TRANSACTIONS: StoredTransactions = {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}